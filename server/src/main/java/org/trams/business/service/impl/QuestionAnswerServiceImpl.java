/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.QuestionAnswer;
import org.trams.bean.QuestionAnswerItem;
import org.trams.bean.jpa.QuestionAnswerEntity;
import java.util.Date;
import org.trams.business.service.QuestionAnswerService;
import org.trams.business.service.mapping.QuestionAnswerServiceMapper;
import org.trams.data.repository.jpa.QuestionAnswerJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of QuestionAnswerService
 */
@Component
@Transactional
public class QuestionAnswerServiceImpl implements QuestionAnswerService {

	@Resource
	private QuestionAnswerJpaRepository questionAnswerJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private QuestionAnswerServiceMapper questionAnswerServiceMapper;
	
	@Override
	public QuestionAnswer findById(Integer id) {
		QuestionAnswerEntity questionAnswerEntity = questionAnswerJpaRepository.findOne(id);
		return questionAnswerServiceMapper.mapQuestionAnswerEntityToQuestionAnswer(questionAnswerEntity);
	}

	@Override
	public Page<QuestionAnswerEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return questionAnswerJpaRepository.findAll(request);
	}

	@Override
	public List<QuestionAnswer> findAll() {
		Iterable<QuestionAnswerEntity> entities = questionAnswerJpaRepository.findAll();
		List<QuestionAnswer> beans = new ArrayList<QuestionAnswer>();
		for(QuestionAnswerEntity questionAnswerEntity : entities) {
			beans.add(questionAnswerServiceMapper.mapQuestionAnswerEntityToQuestionAnswer(questionAnswerEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = questionAnswerJpaRepository.count();
		return count;
	}

	@Override
	public QuestionAnswer save(QuestionAnswer questionAnswer) {
		return update(questionAnswer) ;
	}

	@Override
	public QuestionAnswer create(QuestionAnswer questionAnswer) {
/*
		QuestionAnswerEntity questionAnswerEntity = questionAnswerJpaRepository.findOne(questionAnswer.getId());
		if( questionAnswerEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		questionAnswerEntity = new QuestionAnswerEntity();
		questionAnswerServiceMapper.mapQuestionAnswerToQuestionAnswerEntity(questionAnswer, questionAnswerEntity);
		QuestionAnswerEntity questionAnswerEntitySaved = questionAnswerJpaRepository.save(questionAnswerEntity);
		return questionAnswerServiceMapper.mapQuestionAnswerEntityToQuestionAnswer(questionAnswerEntitySaved);
*/
		QuestionAnswerEntity questionAnswerEntity = new QuestionAnswerEntity();
		questionAnswerServiceMapper.mapQuestionAnswerToQuestionAnswerEntity(questionAnswer, questionAnswerEntity);
		QuestionAnswerEntity questionAnswerEntitySaved = questionAnswerJpaRepository.save(questionAnswerEntity);
		return questionAnswerServiceMapper.mapQuestionAnswerEntityToQuestionAnswer(questionAnswerEntitySaved);
	}

	@Override
	public QuestionAnswer update(QuestionAnswer questionAnswer) {
		QuestionAnswerEntity questionAnswerEntity = questionAnswerJpaRepository.findOne(questionAnswer.getId());
		questionAnswerServiceMapper.mapQuestionAnswerToQuestionAnswerEntity(questionAnswer, questionAnswerEntity);
		QuestionAnswerEntity questionAnswerEntitySaved = questionAnswerJpaRepository.save(questionAnswerEntity);
		return questionAnswerServiceMapper.mapQuestionAnswerEntityToQuestionAnswer(questionAnswerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		questionAnswerJpaRepository.delete(id);
	}

	public QuestionAnswerJpaRepository getQuestionAnswerJpaRepository() {
		return questionAnswerJpaRepository;
	}

	public void setQuestionAnswerJpaRepository(QuestionAnswerJpaRepository questionAnswerJpaRepository) {
		this.questionAnswerJpaRepository = questionAnswerJpaRepository;
	}

	public QuestionAnswerServiceMapper getQuestionAnswerServiceMapper() {
		return questionAnswerServiceMapper;
	}

	public void setQuestionAnswerServiceMapper(QuestionAnswerServiceMapper questionAnswerServiceMapper) {
		this.questionAnswerServiceMapper = questionAnswerServiceMapper;
	}

	@Override
	public Page<QuestionAnswerEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return questionAnswerJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<QuestionAnswerEntity> listPagingByProgramId(Integer programId, Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return questionAnswerJpaRepository.listPagingByProgramId(programId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<QuestionAnswerItem> listByProgramId(Integer programId, Integer page, Integer size) {
		try {
			Integer from = (page-1)*size ;
			List<Object[]> list = questionAnswerJpaRepository.listByProgramId(programId, from, size);
			List<QuestionAnswerItem> result = new ArrayList<>();
			for (Object[] i : list) {
				QuestionAnswerItem qa =new QuestionAnswerItem();
				String askUsername= (String)i[0];
				if(askUsername != null &&  !askUsername.equals("")){
					qa.setAskUserName(askUsername);
				}else{
					String email = (String)i[10];
					String[] split = email.split("@");
					qa.setAskUserName(split[0]);
				}
				String answerUsername= (String)i[1];
				if(answerUsername != null &&  !answerUsername.equals("")){
					qa.setAnswerUserName(answerUsername);
				}else{
					try {
						String email = (String)i[11];
						String[] split = email.split("@");
						qa.setAnswerUserName(split[0]);
					} catch (Exception e) {
						// TODO: handle exception
					}
					
				}
				qa.setAskDate((Date)i[2]);
				qa.setAnswerDate((Date)i[3]);
				qa.setQuestioin((String)i[4]);
				qa.setAnswer((String)i[5]);
				qa.setId((Integer)i[6]);
				qa.setAskUserId((Integer)i[7]);
				qa.setAnswerUserId((Integer)i[8]);
				qa.setProgramId((Integer)i[9]);
				result.add(qa);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalByProgramId(Integer programId) {
		try {
			return questionAnswerJpaRepository.totalByProgramId(programId);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	
	


}
