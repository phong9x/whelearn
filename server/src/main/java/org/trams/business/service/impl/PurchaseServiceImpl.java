/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.bean.CalculateItem;
import org.trams.bean.Purchase;
import org.trams.bean.jpa.PurchaseEntity;
import org.trams.business.service.PurchaseService;
import org.trams.business.service.mapping.PurchaseServiceMapper;
import org.trams.data.repository.jpa.PurchaseJpaRepository;
/**
 * Implementation of PurchaseService
 */
@Component
@Transactional
public class PurchaseServiceImpl implements PurchaseService {

	@Resource
	private PurchaseJpaRepository purchaseJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private PurchaseServiceMapper purchaseServiceMapper;
	
	@Override
	public Purchase findById(Integer id) {
		PurchaseEntity purchaseEntity = purchaseJpaRepository.findOne(id);
		return purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntity);
	}
	
	@Override
	public PurchaseEntity findOne(Integer id) {
		return purchaseJpaRepository.findOne(id);
	}

	@Override
	public Page<PurchaseEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return purchaseJpaRepository.findAll(request);
	}

	@Override
	public List<Purchase> findAll() {
		Iterable<PurchaseEntity> entities = purchaseJpaRepository.findAll();
		List<Purchase> beans = new ArrayList<Purchase>();
		for(PurchaseEntity purchaseEntity : entities) {
			beans.add(purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = purchaseJpaRepository.count();
		return count;
	}

	@Override
	public Purchase save(Purchase purchase) {
		return update(purchase) ;
	}

	@Override
	public Purchase create(Purchase purchase) {
/*
		PurchaseEntity purchaseEntity = purchaseJpaRepository.findOne(purchase.getId());
		if( purchaseEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		purchaseEntity = new PurchaseEntity();
		purchaseServiceMapper.mapPurchaseToPurchaseEntity(purchase, purchaseEntity);
		PurchaseEntity purchaseEntitySaved = purchaseJpaRepository.save(purchaseEntity);
		return purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntitySaved);
*/
		PurchaseEntity purchaseEntity = new PurchaseEntity();
		purchaseServiceMapper.mapPurchaseToPurchaseEntity(purchase, purchaseEntity);
		PurchaseEntity purchaseEntitySaved = purchaseJpaRepository.save(purchaseEntity);
		return purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntitySaved);
	}

	@Override
	public Purchase update(Purchase purchase) {
		PurchaseEntity purchaseEntity = purchaseJpaRepository.findOne(purchase.getId());
		purchaseServiceMapper.mapPurchaseToPurchaseEntity(purchase, purchaseEntity);
		PurchaseEntity purchaseEntitySaved = purchaseJpaRepository.save(purchaseEntity);
		return purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		purchaseJpaRepository.delete(id);
	}

	public PurchaseJpaRepository getPurchaseJpaRepository() {
		return purchaseJpaRepository;
	}

	public void setPurchaseJpaRepository(PurchaseJpaRepository purchaseJpaRepository) {
		this.purchaseJpaRepository = purchaseJpaRepository;
	}

	public PurchaseServiceMapper getPurchaseServiceMapper() {
		return purchaseServiceMapper;
	}

	public void setPurchaseServiceMapper(PurchaseServiceMapper purchaseServiceMapper) {
		this.purchaseServiceMapper = purchaseServiceMapper;
	}

	@Override
	public Page<PurchaseEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<PurchaseEntity> findByFullname(String fullname, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.findByFullname("%"+fullname+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public void update_isDelete(Integer id) {
		 try {
			 purchaseJpaRepository.update_isDelete(id);
			} catch (Exception e) {
				System.out.println(e);
			}
	}

	@Override
	public Page<PurchaseEntity> findByProgramTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.findByProgramTitle("%"+title+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}



	@Override
	public List<CalculateItem> listMemberJoinProgram(Integer id) {
		try {
			List<Object[]> list = purchaseJpaRepository.listMemberJoinProgram(id);
			List<CalculateItem> result = new ArrayList<>();
			for (Object[] i : list) {
				CalculateItem c = new CalculateItem();
				c.setNickname((String)i[0]);
				c.setEmail((String)i[1]);
				c.setPayDate((Date)i[2]);
				c.setCouponContent((String)i[3]);
				c.setMoneyPaid((Integer)i[4]);
				c.setRefundMoney((Integer)i[5]);
				c.setRefundDate((Date)i[6]);
				c.setName((String)i[7]);
				result.add(c);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<PurchaseEntity> findByUserId(Integer userId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.findByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PurchaseEntity> listPagingByUserId(Integer userId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PurchaseEntity> findByProgramTitleAndUserId(String fullname, Integer userId,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.findByProgramTitleAndUserId(fullname, userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public Long totalMoneyPaidByProgramId(Integer programId) {
		try {
			Long total = purchaseJpaRepository.totalMoneyPaidByProgramId(programId);
			if(total == null){
				return (long)0;
			}
			return total;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public Page<PurchaseEntity> listPagingByUserIdAndProgramId(Integer userId, Integer programId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.listPagingByUserIdAndProgramId(userId,programId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PurchaseEntity> findByProgramTitleAndUserIdAndProgramId(String fullname, Integer userId, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return purchaseJpaRepository.findByProgramTitleAndUserIdAndProgramId(fullname, userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}



	@Override
	public void updateRefundEndday() {
		try {
			purchaseJpaRepository.updateRefundEndday();
		} catch (Exception e) {
			System.out.println(e);
			
		}
		
	}

	@Override
	public List<PurchaseEntity> findByUserIdAndProgramId(Integer userId, Integer programId) {
		try {
			return purchaseJpaRepository.findByUserIdAndProgramId(userId, programId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Purchase findByTid(String tid) {
		PurchaseEntity purchaseEntity = purchaseJpaRepository.findByTid(tid);
		return purchaseServiceMapper.mapPurchaseEntityToPurchase(purchaseEntity);
	}
	

}
