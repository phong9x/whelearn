/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.bean.Keyword;
import org.trams.bean.UserKeyword;
import org.trams.bean.jpa.KeywordEntity;
import org.trams.business.service.KeywordService;
import org.trams.business.service.mapping.KeywordServiceMapper;
import org.trams.data.repository.jpa.KeywordJpaRepository;
/**
 * Implementation of KeywordService
 */
@Component
@Transactional
public class KeywordServiceImpl implements KeywordService {

	@Resource
	private KeywordJpaRepository keywordJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private KeywordServiceMapper keywordServiceMapper;
	
	@Override
	public Keyword findById(Integer id) {
		KeywordEntity keywordEntity = keywordJpaRepository.findOne(id);
		return keywordServiceMapper.mapKeywordEntityToKeyword(keywordEntity);
	}

	@Override
	public Page<KeywordEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return keywordJpaRepository.findAll(request);
	}

	@Override
	public List<Keyword> findAll() {
		Iterable<KeywordEntity> entities = keywordJpaRepository.findAll();
		List<Keyword> beans = new ArrayList<Keyword>();
		for(KeywordEntity keywordEntity : entities) {
			beans.add(keywordServiceMapper.mapKeywordEntityToKeyword(keywordEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = keywordJpaRepository.count();
		return count;
	}

	@Override
	public Keyword save(Keyword keyword) {
		return update(keyword) ;
	}

	@Override
	public Keyword create(Keyword keyword) {
/*
		KeywordEntity keywordEntity = keywordJpaRepository.findOne(keyword.getId());
		if( keywordEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		keywordEntity = new KeywordEntity();
		keywordServiceMapper.mapKeywordToKeywordEntity(keyword, keywordEntity);
		KeywordEntity keywordEntitySaved = keywordJpaRepository.save(keywordEntity);
		return keywordServiceMapper.mapKeywordEntityToKeyword(keywordEntitySaved);
*/
		KeywordEntity keywordEntity = new KeywordEntity();
		keywordServiceMapper.mapKeywordToKeywordEntity(keyword, keywordEntity);
		KeywordEntity keywordEntitySaved = keywordJpaRepository.save(keywordEntity);
		return keywordServiceMapper.mapKeywordEntityToKeyword(keywordEntitySaved);
	}

	@Override
	public Keyword update(Keyword keyword) {
		KeywordEntity keywordEntity = keywordJpaRepository.findOne(keyword.getId());
		keywordServiceMapper.mapKeywordToKeywordEntity(keyword, keywordEntity);
		KeywordEntity keywordEntitySaved = keywordJpaRepository.save(keywordEntity);
		return keywordServiceMapper.mapKeywordEntityToKeyword(keywordEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		keywordJpaRepository.delete(id);
	}

	public KeywordJpaRepository getKeywordJpaRepository() {
		return keywordJpaRepository;
	}

	public void setKeywordJpaRepository(KeywordJpaRepository keywordJpaRepository) {
		this.keywordJpaRepository = keywordJpaRepository;
	}

	public KeywordServiceMapper getKeywordServiceMapper() {
		return keywordServiceMapper;
	}

	public void setKeywordServiceMapper(KeywordServiceMapper keywordServiceMapper) {
		this.keywordServiceMapper = keywordServiceMapper;
	}

	@Override
	public List<KeywordEntity> findAllAndorder(Integer page, Integer size, String oderBy) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, oderBy)));
			return keywordJpaRepository.findAllAndorder(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<UserKeyword> listKeyWordByUserId(Integer userId) {
		
		try {
			List<Object[]> list= keywordJpaRepository.listKeyWordByUserId(userId);
			List<UserKeyword> result = new ArrayList<>();
			
			for (Object[] i : list) {
				UserKeyword u = new UserKeyword();
				u.setId((Integer)i[0]);
				u.setKeyword((String)i[1]);
				u.setTotalCount(Long.valueOf(String.valueOf(i[2])));
				u.setType((Integer)i[3]);
				u.setPriority((Integer)i[4]);
				result.add(u);
			}
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<String> listKeyWordByUserId() {
		try {
			List<String> list= keywordJpaRepository.listKeyWordByUserId();
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

}
