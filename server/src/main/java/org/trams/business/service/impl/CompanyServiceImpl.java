/*
 * Created on 26 thg 9 2016 ( Time 11:55:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Company;
import org.trams.bean.jpa.CompanyEntity;
import org.trams.business.service.CompanyService;
import org.trams.business.service.mapping.CompanyServiceMapper;
import org.trams.data.repository.jpa.CompanyJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of CompanyService
 */
@Component
@Transactional
public class CompanyServiceImpl implements CompanyService {

	@Resource
	private CompanyJpaRepository companyJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CompanyServiceMapper companyServiceMapper;
	
	@Override
	public Company findById(Integer id) {
		CompanyEntity companyEntity = companyJpaRepository.findOne(id);
		return companyServiceMapper.mapCompanyEntityToCompany(companyEntity);
	}

	@Override
	public Page<CompanyEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return companyJpaRepository.findAll(request);
	}

	@Override
	public List<Company> findAll() {
		Iterable<CompanyEntity> entities = companyJpaRepository.findAll();
		List<Company> beans = new ArrayList<Company>();
		for(CompanyEntity companyEntity : entities) {
			beans.add(companyServiceMapper.mapCompanyEntityToCompany(companyEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = companyJpaRepository.count();
		return count;
	}

	@Override
	public Company save(Company company) {
		return update(company) ;
	}

	@Override
	public Company create(Company company) {
/*
		CompanyEntity companyEntity = companyJpaRepository.findOne(company.getId());
		if( companyEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		companyEntity = new CompanyEntity();
		companyServiceMapper.mapCompanyToCompanyEntity(company, companyEntity);
		CompanyEntity companyEntitySaved = companyJpaRepository.save(companyEntity);
		return companyServiceMapper.mapCompanyEntityToCompany(companyEntitySaved);
*/
		CompanyEntity companyEntity = new CompanyEntity();
		companyServiceMapper.mapCompanyToCompanyEntity(company, companyEntity);
		CompanyEntity companyEntitySaved = companyJpaRepository.save(companyEntity);
		return companyServiceMapper.mapCompanyEntityToCompany(companyEntitySaved);
	}

	@Override
	public Company update(Company company) {
		CompanyEntity companyEntity = companyJpaRepository.findOne(company.getId());
		companyServiceMapper.mapCompanyToCompanyEntity(company, companyEntity);
		CompanyEntity companyEntitySaved = companyJpaRepository.save(companyEntity);
		return companyServiceMapper.mapCompanyEntityToCompany(companyEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		companyJpaRepository.delete(id);
	}

	public CompanyJpaRepository getCompanyJpaRepository() {
		return companyJpaRepository;
	}

	public void setCompanyJpaRepository(CompanyJpaRepository companyJpaRepository) {
		this.companyJpaRepository = companyJpaRepository;
	}

	public CompanyServiceMapper getCompanyServiceMapper() {
		return companyServiceMapper;
	}

	public void setCompanyServiceMapper(CompanyServiceMapper companyServiceMapper) {
		this.companyServiceMapper = companyServiceMapper;
	}

	@Override
	public Page<CompanyEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return companyJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	


}
