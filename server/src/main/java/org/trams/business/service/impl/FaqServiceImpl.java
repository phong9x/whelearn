/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Faq;
import org.trams.bean.jpa.FaqEntity;
import java.util.Date;
import org.trams.business.service.FaqService;
import org.trams.business.service.mapping.FaqServiceMapper;
import org.trams.data.repository.jpa.FaqJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of FaqService
 */
@Component
@Transactional
public class FaqServiceImpl implements FaqService {

	@Resource
	private FaqJpaRepository faqJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private FaqServiceMapper faqServiceMapper;
	
	@Override
	public Faq findById(Integer id) {
		FaqEntity faqEntity = faqJpaRepository.findOne(id);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntity);
	}

	@Override
	public Page<FaqEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return faqJpaRepository.findAll(request);
	}

	@Override
	public List<Faq> findAll() {
		Iterable<FaqEntity> entities = faqJpaRepository.findAll();
		List<Faq> beans = new ArrayList<Faq>();
		for(FaqEntity faqEntity : entities) {
			beans.add(faqServiceMapper.mapFaqEntityToFaq(faqEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = faqJpaRepository.count();
		return count;
	}

	@Override
	public Faq save(Faq faq) {
		return update(faq) ;
	}

	@Override
	public Faq create(Faq faq) {
/*
		FaqEntity faqEntity = faqJpaRepository.findOne(faq.getId());
		if( faqEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		faqEntity = new FaqEntity();
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
*/
		FaqEntity faqEntity = new FaqEntity();
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
	}

	@Override
	public Faq update(Faq faq) {
		FaqEntity faqEntity = faqJpaRepository.findOne(faq.getId());
		faqServiceMapper.mapFaqToFaqEntity(faq, faqEntity);
		FaqEntity faqEntitySaved = faqJpaRepository.save(faqEntity);
		return faqServiceMapper.mapFaqEntityToFaq(faqEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		faqJpaRepository.delete(id);
	}

	public FaqJpaRepository getFaqJpaRepository() {
		return faqJpaRepository;
	}

	public void setFaqJpaRepository(FaqJpaRepository faqJpaRepository) {
		this.faqJpaRepository = faqJpaRepository;
	}

	public FaqServiceMapper getFaqServiceMapper() {
		return faqServiceMapper;
	}

	public void setFaqServiceMapper(FaqServiceMapper faqServiceMapper) {
		this.faqServiceMapper = faqServiceMapper;
	}

	@Override
	public Page<FaqEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<FaqEntity> listPagingByCategoryId(Integer categoryId, Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.listPagingByCategoryId(categoryId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<FaqEntity> listPagingByQuestion(String question, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.listPagingByQuestion(question, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<FaqEntity> listPagingByCategoryName(String categoryName, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return faqJpaRepository.listPagingByCategoryName(categoryName, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	


}
