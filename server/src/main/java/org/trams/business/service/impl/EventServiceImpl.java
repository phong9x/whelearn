/*
 * Created on 23 thg 8 2016 ( Time 16:20:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Event;
import org.trams.bean.jpa.EventEntity;
import java.util.Date;
import org.trams.business.service.EventService;
import org.trams.business.service.mapping.EventServiceMapper;
import org.trams.data.repository.jpa.EventJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of EventService
 */
@Component
@Transactional
public class EventServiceImpl implements EventService {

	@Resource
	private EventJpaRepository eventJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private EventServiceMapper eventServiceMapper;
	
	@Override
	public Event findById(Integer id) {
		EventEntity eventEntity = eventJpaRepository.findOne(id);
		return eventServiceMapper.mapEventEntityToEvent(eventEntity);
	}

	@Override
	public Page<EventEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return eventJpaRepository.findAll(request);
	}

	@Override
	public List<Event> findAll() {
		Iterable<EventEntity> entities = eventJpaRepository.findAll();
		List<Event> beans = new ArrayList<Event>();
		for(EventEntity eventEntity : entities) {
			beans.add(eventServiceMapper.mapEventEntityToEvent(eventEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = eventJpaRepository.count();
		return count;
	}

	@Override
	public Event save(Event event) {
		return update(event) ;
	}

	@Override
	public Event create(Event event) {
/*
		EventEntity eventEntity = eventJpaRepository.findOne(event.getId());
		if( eventEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		eventEntity = new EventEntity();
		eventServiceMapper.mapEventToEventEntity(event, eventEntity);
		EventEntity eventEntitySaved = eventJpaRepository.save(eventEntity);
		return eventServiceMapper.mapEventEntityToEvent(eventEntitySaved);
*/
		EventEntity eventEntity = new EventEntity();
		eventServiceMapper.mapEventToEventEntity(event, eventEntity);
		EventEntity eventEntitySaved = eventJpaRepository.save(eventEntity);
		return eventServiceMapper.mapEventEntityToEvent(eventEntitySaved);
	}

	@Override
	public Event update(Event event) {
		EventEntity eventEntity = eventJpaRepository.findOne(event.getId());
		eventServiceMapper.mapEventToEventEntity(event, eventEntity);
		EventEntity eventEntitySaved = eventJpaRepository.save(eventEntity);
		return eventServiceMapper.mapEventEntityToEvent(eventEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		eventJpaRepository.delete(id);
	}

	public EventJpaRepository getEventJpaRepository() {
		return eventJpaRepository;
	}

	public void setEventJpaRepository(EventJpaRepository eventJpaRepository) {
		this.eventJpaRepository = eventJpaRepository;
	}

	public EventServiceMapper getEventServiceMapper() {
		return eventServiceMapper;
	}

	public void setEventServiceMapper(EventServiceMapper eventServiceMapper) {
		this.eventServiceMapper = eventServiceMapper;
	}

	@Override
	public Page<EventEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return eventJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<EventEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return eventJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
