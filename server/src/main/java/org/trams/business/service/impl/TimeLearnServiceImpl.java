/*
 * Created on 29 thg 8 2016 ( Time 13:08:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.sql.Time;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.TimeLearn;
import org.trams.bean.jpa.TimeLearnEntity;
import java.util.Date;
import java.util.List;
import org.trams.business.service.TimeLearnService;
import org.trams.business.service.mapping.TimeLearnServiceMapper;
import org.trams.data.repository.jpa.TimeLearnJpaRepository;
import org.joda.time.DateTime;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of TimeLearnService
 */
@Component
@Transactional
public class TimeLearnServiceImpl implements TimeLearnService {

	@Resource
	private TimeLearnJpaRepository timeLearnJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private TimeLearnServiceMapper timeLearnServiceMapper;
	
	@Override
	public TimeLearn findById(Integer id) {
		TimeLearnEntity timeLearnEntity = timeLearnJpaRepository.findOne(id);
		return timeLearnServiceMapper.mapTimeLearnEntityToTimeLearn(timeLearnEntity);
	}

	@Override
	public Page<TimeLearnEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return timeLearnJpaRepository.findAll(request);
	}

	@Override
	public List<TimeLearn> findAll() {
		Iterable<TimeLearnEntity> entities = timeLearnJpaRepository.findAll();
		List<TimeLearn> beans = new ArrayList<TimeLearn>();
		for(TimeLearnEntity timeLearnEntity : entities) {
			beans.add(timeLearnServiceMapper.mapTimeLearnEntityToTimeLearn(timeLearnEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = timeLearnJpaRepository.count();
		return count;
	}

	@Override
	public TimeLearn save(TimeLearn timeLearn) {
		return update(timeLearn) ;
	}

	@Override
	public TimeLearn create(TimeLearn timeLearn) {
/*
		TimeLearnEntity timeLearnEntity = timeLearnJpaRepository.findOne(timeLearn.getId());
		if( timeLearnEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		timeLearnEntity = new TimeLearnEntity();
		timeLearnServiceMapper.mapTimeLearnToTimeLearnEntity(timeLearn, timeLearnEntity);
		TimeLearnEntity timeLearnEntitySaved = timeLearnJpaRepository.save(timeLearnEntity);
		return timeLearnServiceMapper.mapTimeLearnEntityToTimeLearn(timeLearnEntitySaved);
*/
		TimeLearnEntity timeLearnEntity = new TimeLearnEntity();
		timeLearnServiceMapper.mapTimeLearnToTimeLearnEntity(timeLearn, timeLearnEntity);
		TimeLearnEntity timeLearnEntitySaved = timeLearnJpaRepository.save(timeLearnEntity);
		return timeLearnServiceMapper.mapTimeLearnEntityToTimeLearn(timeLearnEntitySaved);
	}

	@Override
	public TimeLearn update(TimeLearn timeLearn) {
		TimeLearnEntity timeLearnEntity = timeLearnJpaRepository.findOne(timeLearn.getId());
		timeLearnServiceMapper.mapTimeLearnToTimeLearnEntity(timeLearn, timeLearnEntity);
		TimeLearnEntity timeLearnEntitySaved = timeLearnJpaRepository.save(timeLearnEntity);
		return timeLearnServiceMapper.mapTimeLearnEntityToTimeLearn(timeLearnEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		timeLearnJpaRepository.delete(id);
	}

	public TimeLearnJpaRepository getTimeLearnJpaRepository() {
		return timeLearnJpaRepository;
	}

	public void setTimeLearnJpaRepository(TimeLearnJpaRepository timeLearnJpaRepository) {
		this.timeLearnJpaRepository = timeLearnJpaRepository;
	}

	public TimeLearnServiceMapper getTimeLearnServiceMapper() {
		return timeLearnServiceMapper;
	}

	public void setTimeLearnServiceMapper(TimeLearnServiceMapper timeLearnServiceMapper) {
		this.timeLearnServiceMapper = timeLearnServiceMapper;
	}

	@Override
	public Page<TimeLearnEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return timeLearnJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<TimeLearnEntity> findByMontYear(Integer month, Integer year) {
		try {
			PageRequest pageable = new PageRequest(0, 100, new Sort(new Order(Direction.DESC, "dateLearn")));
			return timeLearnJpaRepository.findByMontYear(month, year, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<TimeLearnEntity> findByProgramId(Integer program_id) {
		try {
			PageRequest pageable = new PageRequest(0, 100, new Sort(new Order(Direction.DESC, "dateLearn")));
			return timeLearnJpaRepository.findByProgramId(program_id);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteByProgramId(Integer program_id) {
		try {
			timeLearnJpaRepository.deleteByProgramId(program_id);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public void createTimeLearn(Integer programId, Date date_learn, Date from, Date to, Integer opening_day,
			Date create_date, Date update_date) {
		try {
			timeLearnJpaRepository.createTimeLearn(programId, date_learn, from, to, opening_day, create_date, update_date);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public List<TimeLearnEntity> findByMontYearAndUserId(Integer month, Integer year, Integer user_id) {
		try {
			PageRequest pageable = new PageRequest(0, 100, new Sort(new Order(Direction.DESC, "dateLearn")));
			return timeLearnJpaRepository.findByMontYearAndUserId(month, year, user_id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> findTitleFinishProgram(Date date, Integer hour) {
		try {
			return timeLearnJpaRepository.findTitleFinishProgram(date ,hour);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
		
	
}
