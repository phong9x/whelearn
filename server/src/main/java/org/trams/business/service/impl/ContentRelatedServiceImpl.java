/*
 * Created on 25 thg 8 2016 ( Time 16:48:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.ContentRelated;
import org.trams.bean.jpa.ContentRelatedEntity;
import org.trams.bean.jpa.ProgramEntity;

import java.util.Date;
import org.trams.business.service.ContentRelatedService;
import org.trams.business.service.mapping.ContentRelatedServiceMapper;
import org.trams.data.repository.jpa.ContentRelatedJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of ContentRelatedService
 */
@Component
@Transactional
public class ContentRelatedServiceImpl implements ContentRelatedService {

	@Resource
	private ContentRelatedJpaRepository contentRelatedJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ContentRelatedServiceMapper contentRelatedServiceMapper;
	
	@Override
	public ContentRelated findById(Integer id) {
		ContentRelatedEntity contentRelatedEntity = contentRelatedJpaRepository.findOne(id);
		return contentRelatedServiceMapper.mapContentRelatedEntityToContentRelated(contentRelatedEntity);
	}

	@Override
	public Page<ContentRelatedEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return contentRelatedJpaRepository.findAll(request);
	}

	@Override
	public List<ContentRelated> findAll() {
		Iterable<ContentRelatedEntity> entities = contentRelatedJpaRepository.findAll();
		List<ContentRelated> beans = new ArrayList<ContentRelated>();
		for(ContentRelatedEntity contentRelatedEntity : entities) {
			beans.add(contentRelatedServiceMapper.mapContentRelatedEntityToContentRelated(contentRelatedEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = contentRelatedJpaRepository.count();
		return count;
	}

	@Override
	public ContentRelated save(ContentRelated contentRelated) {
		return update(contentRelated) ;
	}

	@Override
	public ContentRelated create(ContentRelated contentRelated) {
/*
		ContentRelatedEntity contentRelatedEntity = contentRelatedJpaRepository.findOne(contentRelated.getId());
		if( contentRelatedEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		contentRelatedEntity = new ContentRelatedEntity();
		contentRelatedServiceMapper.mapContentRelatedToContentRelatedEntity(contentRelated, contentRelatedEntity);
		ContentRelatedEntity contentRelatedEntitySaved = contentRelatedJpaRepository.save(contentRelatedEntity);
		return contentRelatedServiceMapper.mapContentRelatedEntityToContentRelated(contentRelatedEntitySaved);
*/
		ContentRelatedEntity contentRelatedEntity = new ContentRelatedEntity();
		contentRelatedServiceMapper.mapContentRelatedToContentRelatedEntity(contentRelated, contentRelatedEntity);
		ContentRelatedEntity contentRelatedEntitySaved = contentRelatedJpaRepository.save(contentRelatedEntity);
		return contentRelatedServiceMapper.mapContentRelatedEntityToContentRelated(contentRelatedEntitySaved);
	}

	@Override
	public ContentRelated update(ContentRelated contentRelated) {
		ContentRelatedEntity contentRelatedEntity = contentRelatedJpaRepository.findOne(contentRelated.getId());
		contentRelatedServiceMapper.mapContentRelatedToContentRelatedEntity(contentRelated, contentRelatedEntity);
		ContentRelatedEntity contentRelatedEntitySaved = contentRelatedJpaRepository.save(contentRelatedEntity);
		return contentRelatedServiceMapper.mapContentRelatedEntityToContentRelated(contentRelatedEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		contentRelatedJpaRepository.delete(id);
	}

	public ContentRelatedJpaRepository getContentRelatedJpaRepository() {
		return contentRelatedJpaRepository;
	}

	public void setContentRelatedJpaRepository(ContentRelatedJpaRepository contentRelatedJpaRepository) {
		this.contentRelatedJpaRepository = contentRelatedJpaRepository;
	}

	public ContentRelatedServiceMapper getContentRelatedServiceMapper() {
		return contentRelatedServiceMapper;
	}

	public void setContentRelatedServiceMapper(ContentRelatedServiceMapper contentRelatedServiceMapper) {
		this.contentRelatedServiceMapper = contentRelatedServiceMapper;
	}

	@Override
	public Page<ContentRelatedEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contentRelatedJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<ProgramEntity> findProgramRelateByContentId(Integer contentId) {
		try {
			return contentRelatedJpaRepository.findProgramRelateByContentId(contentId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteByContentId(Integer contentRelatedId) {
		try {
			contentRelatedJpaRepository.deleteByContentId(contentRelatedId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	


}
