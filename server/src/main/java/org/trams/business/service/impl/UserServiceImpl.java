/*
 * Created on 23 thg 8 2016 ( Time 14:46:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.User;
import org.trams.bean.jpa.UserEntity;
import java.util.Date;
import java.util.List;
import org.trams.business.service.UserService;
import org.trams.business.service.mapping.UserServiceMapper;
import org.trams.data.repository.jpa.UserJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of UserService
 */
@Component
@Transactional
public class UserServiceImpl implements UserService {

	@Resource
	private UserJpaRepository userJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	@Override
	public User findById(Integer id) {
		UserEntity userEntity = userJpaRepository.findOne(id);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	@Override
	public Page<UserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userJpaRepository.findAll(request);
	}

	@Override
	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userJpaRepository.count();
		return count;
	}

	@Override
	public User save(User user) {
		return update(user) ;
	}

	@Override
	public User create(User user) {
/*
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		if( userEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
*/
		UserEntity userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userJpaRepository.delete(id);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

	@Override
	public Page<UserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public List<UserEntity> findByEmail(String email) {
		try {
			return userJpaRepository.findByEmail(email);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public Page<UserEntity> findByFullname(String fullname, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByFullname(fullname, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public void update_isDelete(Integer id) {
		 try {
			 userJpaRepository.update_isDelete(id);
			} catch (Exception e) {
				System.out.println(e);
			}
	}
	
	@Override
	public User login(String username, String password) {
		try {
			UserEntity u = userJpaRepository.login(username, password);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> findByDayOfBirthAndGender(Date dayOfBirth, Short gender) {
		try {
			List<UserEntity> list = userJpaRepository.findByDayOfBirthAndGender(dayOfBirth, gender);
			List<String> result =new ArrayList<>();
			for (UserEntity userEntity : list) {
				result.add(userEntity.getEmail());
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public User findByDayOfBirthAndGenderAndEmail(Date dayOfBirth, Short gender, String email) {
		try {
			UserEntity u = userJpaRepository.findByDayOfBirthAndGenderAndEmail(dayOfBirth, gender, email);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> listPagingByRole(Integer role, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPagingByType(role, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByNicknameAndEmailAndRole(String nickname, String email, Integer role,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByNicknameAndEmailAndType("%"+nickname+"%", "%"+email+"%", role, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<UserEntity> findByNicknameAndEmail(String nickname, String email, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.findByNicknameAndEmail("%"+nickname+"%", "%"+email+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public User loginAdminPage(String username, String password) {
		try {
			UserEntity u = userJpaRepository.loginAdminPage(username, password);
			return userServiceMapper.mapUserEntityToUser(u);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updatePushFcmToken(String fcm_token) {
		try {
			userJpaRepository.updatePushFcmToken(fcm_token);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}

}
