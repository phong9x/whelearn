/*
 * Created on 24 thg 8 2016 ( Time 17:05:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.CouponUse;
import org.trams.bean.jpa.CouponUseEntity;
import java.util.Date;
import org.trams.business.service.CouponUseService;
import org.trams.business.service.mapping.CouponUseServiceMapper;
import org.trams.data.repository.jpa.CouponUseJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of CouponUseService
 */
@Component
@Transactional
public class CouponUseServiceImpl implements CouponUseService {

	@Resource
	private CouponUseJpaRepository couponUseJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CouponUseServiceMapper couponUseServiceMapper;
	
	@Override
	public CouponUse findById(Integer id) {
		CouponUseEntity couponUseEntity = couponUseJpaRepository.findOne(id);
		return couponUseServiceMapper.mapCouponUseEntityToCouponUse(couponUseEntity);
	}

	@Override
	public Page<CouponUseEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return couponUseJpaRepository.findAll(request);
	}

	@Override
	public List<CouponUse> findAll() {
		Iterable<CouponUseEntity> entities = couponUseJpaRepository.findAll();
		List<CouponUse> beans = new ArrayList<CouponUse>();
		for(CouponUseEntity couponUseEntity : entities) {
			beans.add(couponUseServiceMapper.mapCouponUseEntityToCouponUse(couponUseEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = couponUseJpaRepository.count();
		return count;
	}

	@Override
	public CouponUse save(CouponUse couponUse) {
		return update(couponUse) ;
	}

	@Override
	public CouponUse create(CouponUse couponUse) {
/*
		CouponUseEntity couponUseEntity = couponUseJpaRepository.findOne(couponUse.getId());
		if( couponUseEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		couponUseEntity = new CouponUseEntity();
		couponUseServiceMapper.mapCouponUseToCouponUseEntity(couponUse, couponUseEntity);
		CouponUseEntity couponUseEntitySaved = couponUseJpaRepository.save(couponUseEntity);
		return couponUseServiceMapper.mapCouponUseEntityToCouponUse(couponUseEntitySaved);
*/
		CouponUseEntity couponUseEntity = new CouponUseEntity();
		couponUseServiceMapper.mapCouponUseToCouponUseEntity(couponUse, couponUseEntity);
		CouponUseEntity couponUseEntitySaved = couponUseJpaRepository.save(couponUseEntity);
		return couponUseServiceMapper.mapCouponUseEntityToCouponUse(couponUseEntitySaved);
	}

	@Override
	public CouponUse update(CouponUse couponUse) {
		CouponUseEntity couponUseEntity = couponUseJpaRepository.findOne(couponUse.getId());
		couponUseServiceMapper.mapCouponUseToCouponUseEntity(couponUse, couponUseEntity);
		CouponUseEntity couponUseEntitySaved = couponUseJpaRepository.save(couponUseEntity);
		return couponUseServiceMapper.mapCouponUseEntityToCouponUse(couponUseEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		couponUseJpaRepository.delete(id);
	}

	public CouponUseJpaRepository getCouponUseJpaRepository() {
		return couponUseJpaRepository;
	}

	public void setCouponUseJpaRepository(CouponUseJpaRepository couponUseJpaRepository) {
		this.couponUseJpaRepository = couponUseJpaRepository;
	}

	public CouponUseServiceMapper getCouponUseServiceMapper() {
		return couponUseServiceMapper;
	}

	public void setCouponUseServiceMapper(CouponUseServiceMapper couponUseServiceMapper) {
		this.couponUseServiceMapper = couponUseServiceMapper;
	}

	@Override
	public Page<CouponUseEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUseJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<CouponUseEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUseJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CouponUseEntity> listPagingByUserIdAndType(Integer userId, Integer statusUse, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUseJpaRepository.listPagingByUserIdAndType(userId, statusUse, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CouponUseEntity> listPagingByUserIdAndTypeAndDateline(Integer userId, Integer statusUse, Date date,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUseJpaRepository.listPagingByUserIdAndTypeAndDateline(userId, statusUse, date, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
