/*
 * Created on 23 thg 8 2016 ( Time 16:20:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Content;
import org.trams.bean.Program;
import org.trams.bean.jpa.ContentEntity;
import java.util.Date;
import java.util.List;
import org.trams.business.service.ContentService;
import org.trams.business.service.mapping.ContentServiceMapper;
import org.trams.data.repository.jpa.ContentJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of ContentService
 */
@Component
@Transactional
public class ContentServiceImpl implements ContentService {

	@Resource
	private ContentJpaRepository contentJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ContentServiceMapper contentServiceMapper;
	
	@Override
	public Content findById(Integer id) {
		ContentEntity contentEntity = contentJpaRepository.findOne(id);
		return contentServiceMapper.mapContentEntityToContent(contentEntity);
	}

	@Override
	public Page<ContentEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return contentJpaRepository.findAll(request);
	}

	@Override
	public List<Content> findAll() {
		Iterable<ContentEntity> entities = contentJpaRepository.findAll();
		List<Content> beans = new ArrayList<Content>();
		for(ContentEntity contentEntity : entities) {
			beans.add(contentServiceMapper.mapContentEntityToContent(contentEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = contentJpaRepository.count();
		return count;
	}

	@Override
	public Content save(Content content) {
		return update(content) ;
	}

	@Override
	public Content create(Content content) {
/*
		ContentEntity contentEntity = contentJpaRepository.findOne(content.getId());
		if( contentEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		contentEntity = new ContentEntity();
		contentServiceMapper.mapContentToContentEntity(content, contentEntity);
		ContentEntity contentEntitySaved = contentJpaRepository.save(contentEntity);
		return contentServiceMapper.mapContentEntityToContent(contentEntitySaved);
*/
		ContentEntity contentEntity = new ContentEntity();
		contentServiceMapper.mapContentToContentEntity(content, contentEntity);
		ContentEntity contentEntitySaved = contentJpaRepository.save(contentEntity);
		return contentServiceMapper.mapContentEntityToContent(contentEntitySaved);
	}

	@Override
	public Content update(Content content) {
		ContentEntity contentEntity = contentJpaRepository.findOne(content.getId());
		contentServiceMapper.mapContentToContentEntity(content, contentEntity);
		ContentEntity contentEntitySaved = contentJpaRepository.save(contentEntity);
		return contentServiceMapper.mapContentEntityToContent(contentEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		contentJpaRepository.delete(id);
	}

	public ContentJpaRepository getContentJpaRepository() {
		return contentJpaRepository;
	}

	public void setContentJpaRepository(ContentJpaRepository contentJpaRepository) {
		this.contentJpaRepository = contentJpaRepository;
	}

	public ContentServiceMapper getContentServiceMapper() {
		return contentServiceMapper;
	}

	public void setContentServiceMapper(ContentServiceMapper contentServiceMapper) {
		this.contentServiceMapper = contentServiceMapper;
	}

	@Override
	public Page<ContentEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contentJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<ContentEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contentJpaRepository.findByTitle("%"+title+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ContentEntity> findByCategoryId(Integer categoryId, Integer page, Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contentJpaRepository.findByCategoryId(categoryId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateLike(Integer userId, Integer programId) {
		try {
			 contentJpaRepository.updateLike(userId, programId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public List<Content> findContentLike(Integer userId, Integer page, Integer size) {
		try {
			Integer from = (page-1)*size;
			Integer to = size;
			List<Object[]> list = contentJpaRepository.findContentLike(userId, from, to);
			List<Content> result = new ArrayList<>();
			for (Object[] i : list) {
				Content p = new Content();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setImageUrl((String)i[4]);
				p.setVideoUrl((String)i[5]);
				result.add(p);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalCountContentLike(Integer userId) {
		try {
			return contentJpaRepository.totalCountContentLike(userId);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Page<ContentEntity> findByCategoryName(String categoryName, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contentJpaRepository.findByCategoryName("%"+categoryName+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteContent(Integer contentId) {
		try {
			contentJpaRepository.deleteContent(contentId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public ContentEntity findOne(Integer id) {
		try {
			return contentJpaRepository.findOne(id);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
