/*
 * Created on 13 thg 9 2016 ( Time 16:44:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.bean.Purchase;
import org.trams.bean.jpa.PurchaseEntity;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PurchaseServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PurchaseServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PurchaseEntity' to 'Purchase'
	 * @param purchaseEntity
	 */
	public Purchase mapPurchaseEntityToPurchase(PurchaseEntity purchaseEntity) {
		if(purchaseEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Purchase purchase = map(purchaseEntity, Purchase.class);

		//--- Link mapping ( link to Program )
		if(purchaseEntity.getProgram() != null) {
			purchase.setProgramId(purchaseEntity.getProgram().getId());
		}
		//--- Link mapping ( link to User )
		if(purchaseEntity.getUser() != null) {
			purchase.setUserId(purchaseEntity.getUser().getId());
		}
		return purchase;
	}
	
	/**
	 * Mapping from 'Purchase' to 'PurchaseEntity'
	 * @param purchase
	 * @param purchaseEntity
	 */
	public void mapPurchaseToPurchaseEntity(Purchase purchase, PurchaseEntity purchaseEntity) {
		if(purchase == null) {
			return;
		}

		//--- Generic mapping 
		map(purchase, purchaseEntity);

		//--- Link mapping ( link : purchase )
		if( hasLinkToProgram(purchase) ) {
			ProgramEntity program1 = new ProgramEntity();
			program1.setId( purchase.getProgramId() );
			purchaseEntity.setProgram( program1 );
		} else {
			purchaseEntity.setProgram( null );
		}

		//--- Link mapping ( link : purchase )
		if( hasLinkToUser(purchase) ) {
			UserEntity user2 = new UserEntity();
			user2.setId( purchase.getUserId() );
			purchaseEntity.setUser( user2 );
		} else {
			purchaseEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that Program id is valid.
	 * @param Program Program
	 * @return boolean
	 */
	private boolean hasLinkToProgram(Purchase purchase) {
		if(purchase.getProgramId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Purchase purchase) {
		if(purchase.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}