/*
 * Created on 5 12�� 2016 ( Time 15:38:23 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.bean.CategoryCount;
import org.trams.bean.jpa.CategoryCountEntity;
import org.trams.business.service.CategoryCountService;
import org.trams.business.service.mapping.CategoryCountServiceMapper;
import org.trams.data.repository.jpa.CategoryCountJpaRepository;
/**
 * Implementation of CategoryCountService
 */
@Component
@Transactional
public class CategoryCountServiceImpl implements CategoryCountService {

	@Resource
	private CategoryCountJpaRepository categoryCountJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CategoryCountServiceMapper categoryCountServiceMapper;
	
	@Override
	public CategoryCount findById(Integer id) {
		CategoryCountEntity categoryCountEntity = categoryCountJpaRepository.findOne(id);
		return categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntity);
	}

	@Override
	public Page<CategoryCountEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return categoryCountJpaRepository.findAll(request);
	}

	@Override
	public List<CategoryCount> findAll() {
		Iterable<CategoryCountEntity> entities = categoryCountJpaRepository.findAll();
		List<CategoryCount> beans = new ArrayList<CategoryCount>();
		for(CategoryCountEntity categoryCountEntity : entities) {
			beans.add(categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = categoryCountJpaRepository.count();
		return count;
	}

	@Override
	public CategoryCount save(CategoryCount categoryCount) {
		return update(categoryCount) ;
	}

	@Override
	public CategoryCount create(CategoryCount categoryCount) {
/*
		CategoryCountEntity categoryCountEntity = categoryCountJpaRepository.findOne(categoryCount.getId());
		if( categoryCountEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		categoryCountEntity = new CategoryCountEntity();
		categoryCountServiceMapper.mapCategoryCountToCategoryCountEntity(categoryCount, categoryCountEntity);
		CategoryCountEntity categoryCountEntitySaved = categoryCountJpaRepository.save(categoryCountEntity);
		return categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntitySaved);
*/
		CategoryCountEntity categoryCountEntity = new CategoryCountEntity();
		categoryCountServiceMapper.mapCategoryCountToCategoryCountEntity(categoryCount, categoryCountEntity);
		CategoryCountEntity categoryCountEntitySaved = categoryCountJpaRepository.save(categoryCountEntity);
		return categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntitySaved);
	}

	@Override
	public CategoryCount update(CategoryCount categoryCount) {
		CategoryCountEntity categoryCountEntity = categoryCountJpaRepository.findOne(categoryCount.getId());
		categoryCountServiceMapper.mapCategoryCountToCategoryCountEntity(categoryCount, categoryCountEntity);
		CategoryCountEntity categoryCountEntitySaved = categoryCountJpaRepository.save(categoryCountEntity);
		return categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		categoryCountJpaRepository.delete(id);
	}

	public CategoryCountJpaRepository getCategoryCountJpaRepository() {
		return categoryCountJpaRepository;
	}

	public void setCategoryCountJpaRepository(CategoryCountJpaRepository categoryCountJpaRepository) {
		this.categoryCountJpaRepository = categoryCountJpaRepository;
	}

	public CategoryCountServiceMapper getCategoryCountServiceMapper() {
		return categoryCountServiceMapper;
	}

	public void setCategoryCountServiceMapper(CategoryCountServiceMapper categoryCountServiceMapper) {
		this.categoryCountServiceMapper = categoryCountServiceMapper;
	}

	@Override
	public Page<CategoryCountEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return categoryCountJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public CategoryCount findByUserIdAndCategoryId(Integer userId, Integer categoryId) {
		CategoryCountEntity categoryCountEntity = categoryCountJpaRepository.findByUserIdAndCategoryId(userId, categoryId);
		return categoryCountServiceMapper.mapCategoryCountEntityToCategoryCount(categoryCountEntity);
	}

	@Override
	public Integer getFirstCategoryIdByUserId(Integer userId) {
		Integer categoryId = categoryCountJpaRepository.findFirstByUserId(userId);;
		if(categoryId == null){
			categoryId = 1;
		}
		return categoryId;
	}
	
	


}
