/*
 * Created on 13 thg 9 2016 ( Time 10:21:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.bean.ContentRelated;
import org.trams.bean.jpa.ContentRelatedEntity;
import org.trams.bean.jpa.ContentEntity;
import org.trams.bean.jpa.ProgramEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ContentRelatedServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ContentRelatedServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ContentRelatedEntity' to 'ContentRelated'
	 * @param contentRelatedEntity
	 */
	public ContentRelated mapContentRelatedEntityToContentRelated(ContentRelatedEntity contentRelatedEntity) {
		if(contentRelatedEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ContentRelated contentRelated = map(contentRelatedEntity, ContentRelated.class);

		//--- Link mapping ( link to Content )
		if(contentRelatedEntity.getContent() != null) {
			contentRelated.setContentRelatedId(contentRelatedEntity.getContent().getId());
		}
		//--- Link mapping ( link to Program )
		if(contentRelatedEntity.getProgram() != null) {
			contentRelated.setProgramId(contentRelatedEntity.getProgram().getId());
		}
		return contentRelated;
	}
	
	/**
	 * Mapping from 'ContentRelated' to 'ContentRelatedEntity'
	 * @param contentRelated
	 * @param contentRelatedEntity
	 */
	public void mapContentRelatedToContentRelatedEntity(ContentRelated contentRelated, ContentRelatedEntity contentRelatedEntity) {
		if(contentRelated == null) {
			return;
		}

		//--- Generic mapping 
		map(contentRelated, contentRelatedEntity);

		//--- Link mapping ( link : contentRelated )
		if( hasLinkToContent(contentRelated) ) {
			ContentEntity content1 = new ContentEntity();
			content1.setId( contentRelated.getContentRelatedId() );
			contentRelatedEntity.setContent( content1 );
		} else {
			contentRelatedEntity.setContent( null );
		}

		//--- Link mapping ( link : contentRelated )
		if( hasLinkToProgram(contentRelated) ) {
			ProgramEntity program2 = new ProgramEntity();
			program2.setId( contentRelated.getProgramId() );
			contentRelatedEntity.setProgram( program2 );
		} else {
			contentRelatedEntity.setProgram( null );
		}

	}
	
	/**
	 * Verify that Content id is valid.
	 * @param Content Content
	 * @return boolean
	 */
	private boolean hasLinkToContent(ContentRelated contentRelated) {
		if(contentRelated.getContentRelatedId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Program id is valid.
	 * @param Program Program
	 * @return boolean
	 */
	private boolean hasLinkToProgram(ContentRelated contentRelated) {
		if(contentRelated.getProgramId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}