/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Likes;
import org.trams.bean.jpa.LikesEntity;
import java.util.Date;
import org.trams.business.service.LikesService;
import org.trams.business.service.mapping.LikesServiceMapper;
import org.trams.data.repository.jpa.LikesJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of LikesService
 */
@Component
@Transactional
public class LikesServiceImpl implements LikesService {

	@Resource
	private LikesJpaRepository likesJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private LikesServiceMapper likesServiceMapper;
	
	@Override
	public Likes findById(Integer id) {
		LikesEntity likesEntity = likesJpaRepository.findOne(id);
		return likesServiceMapper.mapLikesEntityToLikes(likesEntity);
	}

	@Override
	public Page<LikesEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return likesJpaRepository.findAll(request);
	}

	@Override
	public List<Likes> findAll() {
		Iterable<LikesEntity> entities = likesJpaRepository.findAll();
		List<Likes> beans = new ArrayList<Likes>();
		for(LikesEntity likesEntity : entities) {
			beans.add(likesServiceMapper.mapLikesEntityToLikes(likesEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = likesJpaRepository.count();
		return count;
	}

	@Override
	public Likes save(Likes likes) {
		return update(likes) ;
	}

	@Override
	public Likes create(Likes likes) {
/*
		LikesEntity likesEntity = likesJpaRepository.findOne(likes.getId());
		if( likesEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		likesEntity = new LikesEntity();
		likesServiceMapper.mapLikesToLikesEntity(likes, likesEntity);
		LikesEntity likesEntitySaved = likesJpaRepository.save(likesEntity);
		return likesServiceMapper.mapLikesEntityToLikes(likesEntitySaved);
*/
		LikesEntity likesEntity = new LikesEntity();
		likesServiceMapper.mapLikesToLikesEntity(likes, likesEntity);
		LikesEntity likesEntitySaved = likesJpaRepository.save(likesEntity);
		return likesServiceMapper.mapLikesEntityToLikes(likesEntitySaved);
	}

	@Override
	public Likes update(Likes likes) {
		LikesEntity likesEntity = likesJpaRepository.findOne(likes.getUserId());
		likesServiceMapper.mapLikesToLikesEntity(likes, likesEntity);
		LikesEntity likesEntitySaved = likesJpaRepository.save(likesEntity);
		return likesServiceMapper.mapLikesEntityToLikes(likesEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		likesJpaRepository.delete(id);
	}

	public LikesJpaRepository getLikesJpaRepository() {
		return likesJpaRepository;
	}

	public void setLikesJpaRepository(LikesJpaRepository likesJpaRepository) {
		this.likesJpaRepository = likesJpaRepository;
	}

	public LikesServiceMapper getLikesServiceMapper() {
		return likesServiceMapper;
	}

	public void setLikesServiceMapper(LikesServiceMapper likesServiceMapper) {
		this.likesServiceMapper = likesServiceMapper;
	}

	@Override
	public Page<LikesEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return likesJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<LikesEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return likesJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public LikesEntity findByUserIdAndThreadIdAndType(Integer userId, Integer contentId, Integer type) {
		try{
			return likesJpaRepository.findByUserIdAndThreadIdAndType(userId, contentId, type);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteLike(Integer userId, Integer threadId, Integer type) {
		try{
		   likesJpaRepository.deleteLike(userId, threadId, type);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

}
