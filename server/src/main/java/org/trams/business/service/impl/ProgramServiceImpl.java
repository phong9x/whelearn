/*
 * Created on 23 thg 8 2016 ( Time 16:20:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.trams.bean.KeywordWheaLearn;
import org.trams.bean.Program;
import org.trams.bean.UserKeywordList;
import org.trams.bean.WheLearn;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.jpa.ProgramEntityCustom;
import org.trams.bean.jpa.TimeLearnEntity;
import org.trams.business.service.ProgramService;
import org.trams.business.service.TimeLearnService;
import org.trams.business.service.mapping.ProgramServiceMapper;
import org.trams.data.repository.jpa.ProgramJpaRepository;
/**
 * Implementation of ProgramService
 */
@Component
@Transactional
public class ProgramServiceImpl implements ProgramService {

	@Resource
	private ProgramJpaRepository programJpaRepository;

	@Resource
	private TimeLearnService timeLearnService;
	
	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ProgramServiceMapper programServiceMapper;
	
	@Override
	public Program findById(Integer id) {
		ProgramEntity programEntity = programJpaRepository.findOne(id);
		return programServiceMapper.mapProgramEntityToProgram(programEntity);
	}
	
	@Override
	public ProgramEntity findOne(Integer id) {
		return programJpaRepository.findOne(id);
	}

	@Override
	public Page<ProgramEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return programJpaRepository.findAll(request);
	}

	@Override
	public List<Program> findAll() {
		Iterable<ProgramEntity> entities = programJpaRepository.findAll();
		List<Program> beans = new ArrayList<Program>();
		for(ProgramEntity programEntity : entities) {
			beans.add(programServiceMapper.mapProgramEntityToProgram(programEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = programJpaRepository.count();
		return count;
	}

	@Override
	public Program save(Program program) {
		return update(program) ;
	}

	@Override
	public Program create(Program program) {
/*
		ProgramEntity programEntity = programJpaRepository.findOne(program.getId());
		if( programEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		programEntity = new ProgramEntity();
		programServiceMapper.mapProgramToProgramEntity(program, programEntity);
		ProgramEntity programEntitySaved = programJpaRepository.save(programEntity);
		return programServiceMapper.mapProgramEntityToProgram(programEntitySaved);
*/
		ProgramEntity programEntity = new ProgramEntity();
		programServiceMapper.mapProgramToProgramEntity(program, programEntity);
		ProgramEntity programEntitySaved = programJpaRepository.save(programEntity);
		return programServiceMapper.mapProgramEntityToProgram(programEntitySaved);
	}

	@Override
	public Program update(Program program) {
		ProgramEntity programEntity = programJpaRepository.findOne(program.getId());
		programServiceMapper.mapProgramToProgramEntity(program, programEntity);
		ProgramEntity programEntitySaved = programJpaRepository.save(programEntity);
		return programServiceMapper.mapProgramEntityToProgram(programEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		programJpaRepository.delete(id);
	}

	public ProgramJpaRepository getProgramJpaRepository() {
		return programJpaRepository;
	}

	public void setProgramJpaRepository(ProgramJpaRepository programJpaRepository) {
		this.programJpaRepository = programJpaRepository;
	}

	public ProgramServiceMapper getProgramServiceMapper() {
		return programServiceMapper;
	}

	public void setProgramServiceMapper(ProgramServiceMapper programServiceMapper) {
		this.programServiceMapper = programServiceMapper;
	}

	@Override
	public Page<ProgramEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<ProgramEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public Page<ProgramEntity> findByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.findByTitle(title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public void update_isDelete(Integer id) {
		 try {
			 programJpaRepository.update_isDelete(id);
			} catch (Exception e) {
				System.out.println(e);
			}
	}

	@Override
	public Page<ProgramEntity> findByCategoryId(Integer catId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.findByCategoryId(catId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updatePointProgram(Integer userId, Integer programId) {
		try {
			programJpaRepository.updatePointProgram(userId, programId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public void updateLike(Integer userId, Integer programId) {
		try {
			programJpaRepository.updateLike(userId, programId);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	@Override
	public List<ProgramEntity> findByMonth(Integer month, Integer year) {
		try {
			return programJpaRepository.findByMonth(month, year);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public ProgramEntity findByIdEntity(Integer id) {
		try {
			ProgramEntity p = programJpaRepository.findByIdEntity(id);
//			List<TimeLearnEntity> list = timeLearnService.findByProgramId(id);
//			List<TimeLearnEntity> list_time = new ArrayList<>();
//			if(list != null){
//				for (TimeLearnEntity i : list) {
//					i.setProgram(null);
//					list_time.add(i);
//				}
//			}
//			p.setListOfTimeLearn(list_time);
			return p;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Program> findByProgramRelative(Integer categoryId,Integer programId) {
		try {
			List<Object[]> list = programJpaRepository.findByProgramRelative(categoryId, programId);
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list) {
				Program p =new Program();
				p.setId((Integer)i[0]);
				p.setTitle((String)i[1]);
				p.setCategoryName((String)i[2]);
				p.setSummary((String)i[3]);
				p.setImageUrl((String)i[4]);
				p.setVideoUrl((String)i[5]);
				list_program.add(p);
			}
			return list_program;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Program> findProgramLike(Integer userId, Integer page, Integer size) {
		try {
			Integer from = (page-1)*size;
			Integer to = size;
			
			List<Object[]> list = programJpaRepository.findProgramLike(userId, from, to);
			List<Program> result = new ArrayList<>();
			for (Object[] i : list) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				p.setTotalPeople((Integer)i[5]);
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				p.setTotalTime((String)i[8]);
				result.add(p);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalCountProgramLike(Integer userId) {
		try {
			return programJpaRepository.totalCountProgramLike(userId);
		} catch (Exception e) {
			return 0;
		}
	}

	@Override
	public List<Program> listProgram(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			Page<ProgramEntity> list= programJpaRepository.listPaging(pageable);
			List<Program> result = new ArrayList<>();
			for (ProgramEntity program : list) {
				result.add(programServiceMapper.mapProgramEntityToProgram(program));
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
			
		}
		
	}

	@Override
	public Page<ProgramEntity> findByCategoryName(String categoryName, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.findByCategoryName("%"+categoryName+"%", pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> findByListCategoryId(Integer[] catId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.findByListCategoryId(catId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntityCustom> listPagingByUserIdCustom(Integer userId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return programJpaRepository.listPagingByUserIdCustom(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculate(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculate(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculateByTitle(String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculateByTitle(title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculateByStatus(Integer status, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculateByStatus(status, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculateByUserId(Integer userId,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculateByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculateByTitleAndUserId(Integer userId, String title, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculateByTitleAndUserId(userId, title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProgramEntity> listPagingCaculateByStatusAndUserId(Integer userId, Integer status, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "totalMoney")));
			return programJpaRepository.listPagingCaculateByStatusAndUserId(userId, status, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateTotalMoney(Integer programId) {
		try {
			programJpaRepository.updateTotalMoney(programId);
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}


	@Override
	public WheLearn whelearnB_NotLogin() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list = programJpaRepository.listWhelearnB_NotLogin();
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			w.setListProgram(list_program);
			w.setListKeyword(null);
			w.setType(2);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	

	@Override
	public WheLearn whelearnC_NotLogin() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnC();
			List<String> list_keyword_str = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_str.add((String)i[1]);
			}
			List<Object[]> list_program_ob = programJpaRepository.listWhelearnC_NotLogin();
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list_program_ob) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			
			w.setListProgram(list_program);
			w.setListKeyword(list_keyword_str);
			w.setType(3);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public WheLearn whelearnD_NotLogin() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnD();
			List<String> list_keyword_str = new ArrayList<>();
			List<Integer> list_keyword_id = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_id.add((Integer)i[0]);
				list_keyword_str.add((String)i[1]);
			}
			List<Object[]> list_program_ob = programJpaRepository.listWhelearnD_NotLogin(list_keyword_id.get(0), list_keyword_id.get(1));
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list_program_ob) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			w.setListProgram(list_program);
			w.setListKeyword(list_keyword_str);
			w.setType(4);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public WheLearn whelearnE_NotLogin() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnE();
			List<String> list_keyword_str = new ArrayList<>();
			List<Integer> list_keyword_id = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_id.add((Integer)i[0]);
				list_keyword_str.add((String)i[1]);
			}
			List<Object[]> list_program_ob = programJpaRepository.listWhelearnE_NotLogin(list_keyword_id.get(0));
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list_program_ob) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			w.setListProgram(list_program);
			w.setListKeyword(list_keyword_str);
			w.setType(5);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public WheLearn whelearnF_NotLogin() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnF();
			List<String> list_keyword_str = new ArrayList<>();
			List<Integer> list_keyword_id = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_id.add((Integer)i[0]);
				list_keyword_str.add((String)i[1]);
			}
			List<Object[]> list_program_ob = programJpaRepository.listWhelearnF_NotLogin(list_keyword_id.get(0),list_keyword_id.get(1));
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list_program_ob) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			w.setListProgram(list_program);
			w.setListKeyword(list_keyword_str);
			w.setType(6);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<KeywordWheaLearn> listWhelearn_getProgram_byCategoryId(Integer categoryId, UserKeywordList ukl) {
		try {
			List<Object[]> list_program_ob = programJpaRepository.listWhelearn_getProgram_byCategoryId(categoryId);
			List<KeywordWheaLearn> list_program = new ArrayList<>();
			for (Object[] i : list_program_ob) {
				KeywordWheaLearn p = new KeywordWheaLearn();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				p.setGender((Integer)i[8]);
				p.setAge((Integer)i[9]);
				p.setGenitive((Integer)i[10]);
				p.setExperience((Integer)i[11]);
				p.setPlaceStudy((Integer)i[12]);
				p.setArea((Integer)i[13]);
				p.setTime1((Integer)i[14]);
				p.setTime2((Integer)i[15]);
				p.setFeeStudy((Integer)i[16]);
				p.setStudyMode((Integer)i[17]);
				p.setSizeClass((Integer)i[18]);
				p.setWhelearnB(0);
				p.setWhelearnC(0);
				p.setWhelearnD(0);
				p.setWhelearnE(0);
				p.setWhelearnF(0);
				if(p.getGender().equals(ukl.getGender())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnC()+1);
				}
				if(p.getAge().equals(ukl.getAge())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnC()+1);
				}
				if(p.getGender().equals(ukl.getGender())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnC()+1);
				}
				if(p.getGenitive().equals(ukl.getGenitive())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnC()+1);
				}
				if(p.getExperience().equals(ukl.getExperience())){
					p.setWhelearnB(p.getWhelearnB()+1);
				}
				if(p.getPlaceStudy().equals(ukl.getPlaceStudy())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnF(p.getWhelearnF()+1);
				}
				if(p.getArea().equals(ukl.getArea())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnF(p.getWhelearnF()+1);
				}
				if(p.getTime1().equals(ukl.getTime1())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnD()+1);
				}
				if(p.getTime2().equals(ukl.getTime2())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnC(p.getWhelearnD()+1);
				}
				if(p.getFeeStudy().equals(ukl.getFeeStudy())){
					p.setWhelearnB(p.getWhelearnB()+1);
					p.setWhelearnD(p.getWhelearnD()+1);
				}
				if(p.getStudyMode().equals(ukl.getStudyMode())){
					p.setWhelearnB(p.getWhelearnB()+1);
				}
				if(p.getSizeClass().equals(ukl.getSizeClass())){
					p.setWhelearnB(p.getWhelearnB()+1);
				}

				list_program.add(p);
			}
			return list_program;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public WheLearn listWhelearnB_Login() {
		try {
			WheLearn w = new WheLearn();
			List<Object[]> list = programJpaRepository.listWhelearnB_Login();
			List<Program> list_program = new ArrayList<>();
			for (Object[] i : list) {
				Program p = new Program();
				p.setId((Integer)i[0]);
				p.setCategoryName((String)i[1]);
				p.setTitle((String)i[2]);
				p.setSummary((String)i[3]);
				p.setFee((Integer)i[4]);
				try {
					p.setTotalPeople((Integer)i[5]);
				} catch (Exception e) {
					p.setTotalPeople(0);
				}
				p.setImageUrl((String)i[6]);
				p.setVideoUrl((String)i[7]);
				list_program.add(p);
			}
			w.setListProgram(list_program);
			w.setListKeyword(null);
			w.setType(2);
			return w;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Integer getCategoryId_Top1() {
		try {
			return programJpaRepository.getCategoryId_Top1();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<String> listKeywordWhelearnC() {
		try {
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnC();
			List<String> list_keyword_str = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_str.add((String)i[1]);
			}
			return list_keyword_str;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<String> listKeywordWhelearnD() {
		try {
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnD();
			List<String> list_keyword_str = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_str.add((String)i[1]);
			}
			return list_keyword_str;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<String> listKeywordWhelearnE() {
		try {
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnE();
			List<String> list_keyword_str = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_str.add((String)i[1]);
			}
			return list_keyword_str;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<String> listKeywordWhelearnF() {
		try {
			List<Object[]> list_keyword_ob = programJpaRepository.listKeywordWhelearnF();
			List<String> list_keyword_str = new ArrayList<>();
			for (Object[] i : list_keyword_ob) {
				list_keyword_str.add((String)i[1]);
			}
			return list_keyword_str;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	

}
