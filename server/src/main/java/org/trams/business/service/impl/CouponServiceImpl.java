/*
 * Created on 24 thg 8 2016 ( Time 17:05:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Coupon;
import org.trams.bean.jpa.CouponEntity;
import java.util.Date;
import org.trams.business.service.CouponService;
import org.trams.business.service.mapping.CouponServiceMapper;
import org.trams.data.repository.jpa.CouponJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of CouponService
 */
@Component
@Transactional
public class CouponServiceImpl implements CouponService {

	@Resource
	private CouponJpaRepository couponJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CouponServiceMapper couponServiceMapper;
	
	@Override
	public Coupon findById(Integer id) {
		CouponEntity couponEntity = couponJpaRepository.findOne(id);
		return couponServiceMapper.mapCouponEntityToCoupon(couponEntity);
	}

	@Override
	public Page<CouponEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return couponJpaRepository.findAll(request);
	}

	@Override
	public List<Coupon> findAll() {
		Iterable<CouponEntity> entities = couponJpaRepository.findAll();
		List<Coupon> beans = new ArrayList<Coupon>();
		for(CouponEntity couponEntity : entities) {
			beans.add(couponServiceMapper.mapCouponEntityToCoupon(couponEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = couponJpaRepository.count();
		return count;
	}

	@Override
	public Coupon save(Coupon coupon) {
		return update(coupon) ;
	}

	@Override
	public Coupon create(Coupon coupon) {
/*
		CouponEntity couponEntity = couponJpaRepository.findOne(coupon.getId());
		if( couponEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		couponEntity = new CouponEntity();
		couponServiceMapper.mapCouponToCouponEntity(coupon, couponEntity);
		CouponEntity couponEntitySaved = couponJpaRepository.save(couponEntity);
		return couponServiceMapper.mapCouponEntityToCoupon(couponEntitySaved);
*/
		CouponEntity couponEntity = new CouponEntity();
		couponServiceMapper.mapCouponToCouponEntity(coupon, couponEntity);
		CouponEntity couponEntitySaved = couponJpaRepository.save(couponEntity);
		return couponServiceMapper.mapCouponEntityToCoupon(couponEntitySaved);
	}

	@Override
	public Coupon update(Coupon coupon) {
		CouponEntity couponEntity = couponJpaRepository.findOne(coupon.getId());
		couponServiceMapper.mapCouponToCouponEntity(coupon, couponEntity);
		CouponEntity couponEntitySaved = couponJpaRepository.save(couponEntity);
		return couponServiceMapper.mapCouponEntityToCoupon(couponEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		couponJpaRepository.delete(id);
	}

	public CouponJpaRepository getCouponJpaRepository() {
		return couponJpaRepository;
	}

	public void setCouponJpaRepository(CouponJpaRepository couponJpaRepository) {
		this.couponJpaRepository = couponJpaRepository;
	}

	public CouponServiceMapper getCouponServiceMapper() {
		return couponServiceMapper;
	}

	public void setCouponServiceMapper(CouponServiceMapper couponServiceMapper) {
		this.couponServiceMapper = couponServiceMapper;
	}

	@Override
	public Page<CouponEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<CouponEntity> findByName(String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponJpaRepository.findByName(name, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
