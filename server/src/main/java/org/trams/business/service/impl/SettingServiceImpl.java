/*
 * Created on 26 thg 8 2016 ( Time 11:30:22 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.bean.Setting;
import org.trams.bean.jpa.CommentNotification;
import org.trams.bean.jpa.SettingEntity;
import java.util.Date;
import org.trams.business.service.SettingService;
import org.trams.business.service.mapping.SettingServiceMapper;
import org.trams.data.repository.jpa.SettingJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
/**
 * Implementation of SettingService
 */
@Component
@Transactional
public class SettingServiceImpl implements SettingService {

	@Resource
	private SettingJpaRepository settingJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private SettingServiceMapper settingServiceMapper;
	
	@Override
	public Setting findById(Integer id) {
		SettingEntity settingEntity = settingJpaRepository.findOne(id);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntity);
	}

	@Override
	public Page<SettingEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return settingJpaRepository.findAll(request);
	}

	@Override
	public List<Setting> findAll() {
		Iterable<SettingEntity> entities = settingJpaRepository.findAll();
		List<Setting> beans = new ArrayList<Setting>();
		for(SettingEntity settingEntity : entities) {
			beans.add(settingServiceMapper.mapSettingEntityToSetting(settingEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = settingJpaRepository.count();
		return count;
	}

	@Override
	public Setting save(Setting setting) {
		return update(setting) ;
	}

	@Override
	public Setting create(Setting setting) {
/*
		SettingEntity settingEntity = settingJpaRepository.findOne(setting.getId());
		if( settingEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		settingEntity = new SettingEntity();
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
*/
		SettingEntity settingEntity = new SettingEntity();
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
	}

	@Override
	public Setting update(Setting setting) {
		SettingEntity settingEntity = settingJpaRepository.findOne(setting.getId());
		settingServiceMapper.mapSettingToSettingEntity(setting, settingEntity);
		SettingEntity settingEntitySaved = settingJpaRepository.save(settingEntity);
		return settingServiceMapper.mapSettingEntityToSetting(settingEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		settingJpaRepository.delete(id);
	}

	public SettingJpaRepository getSettingJpaRepository() {
		return settingJpaRepository;
	}

	public void setSettingJpaRepository(SettingJpaRepository settingJpaRepository) {
		this.settingJpaRepository = settingJpaRepository;
	}

	public SettingServiceMapper getSettingServiceMapper() {
		return settingServiceMapper;
	}

	public void setSettingServiceMapper(SettingServiceMapper settingServiceMapper) {
		this.settingServiceMapper = settingServiceMapper;
	}

	@Override
	public Page<SettingEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return settingJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	

	@Override
	public Page<SettingEntity> listPagingByUserId(Integer page, Integer size, Integer userId) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return settingJpaRepository.listPagingByUserId(userId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public SettingEntity findByUserId(Integer userId) {
		try {
			return settingJpaRepository.findById(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_UploadContentNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_UploadContentNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_OpenCourseNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_OpenCourseNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public List<String> getFCMTokenBy_NoticeNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_NoticeNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public List<String> getFCMTokenBy_FinishPayCourseNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_FinishPayCourseNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_PostQuestionCourseNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_PostQuestionCourseNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_PostCommentCourseNotification() {
		try {
			return settingJpaRepository.getFCMTokenBy_PostCommentCourseNotification();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<CommentNotification> getFCMTokenBy_CommentNotification(String now) {
		try {
			List<Object[]> list = settingJpaRepository.getFCMTokenBy_CommentNotification(now);
			List<CommentNotification> result = new ArrayList<>();
			for (Object[] objects : list) {
				CommentNotification c = new CommentNotification();
				c.setId((Integer) objects[0]);
				c.setTitle((String) objects[1]);
				c.setFCMToken((String) objects[2]);
				result.add(c);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_CouponNotification_Join(Integer countDate) {
		try {
			return settingJpaRepository.getFCMTokenBy_CouponNotification_Join(countDate);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<String> getFCMTokenBy_CouponNotification_Use_Comment(Integer countDate, Integer couponId) {
		try {
			return settingJpaRepository.getFCMTokenBy_CouponNotification_Use_Comment(countDate, couponId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<CommentNotification> getFCMTokenBy_FinishRegisterCourseNotification(Date deadLine, Integer hour) {
		try {
			List<Object[]> list = settingJpaRepository.getFCMTokenBy_FinishRegisterCourseNotification(deadLine, hour);
			List<CommentNotification> result = new ArrayList<>();
			for (Object[] objects : list) {
				CommentNotification c = new CommentNotification();
				c.setId((Integer) objects[0]);
				c.setTitle((String) objects[1]);
				c.setFCMToken((String) objects[2]);
				result.add(c);
			}
			return result;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
