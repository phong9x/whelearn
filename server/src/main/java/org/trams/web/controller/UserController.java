/*
 * Created on 1 thg 9 2016 ( Time 11:28:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.web.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.ModelAttribute;


//--- Common classes
import org.trams.web.common.AbstractController;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.Pager;
import org.trams.web.common.utils.DataUtils;
import org.trams.web.common.Login;
import org.trams.bean.jpa.CouponEntity;
import org.trams.bean.jpa.CouponUseEntity;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.jpa.ProgramEntityCustom;
import org.trams.bean.jpa.ProgramRegisterEntity;
import org.trams.bean.jpa.ProgramRegisterEntityCustom;
import org.trams.bean.jpa.ProgramViewEntity;
import org.trams.bean.jpa.PurchaseEntity;
import org.trams.bean.jpa.UserEntity;
import org.trams.bean.CouponUse;
import org.trams.bean.ProgramRegister;
//--- Entities
import org.trams.bean.User;
import org.trams.bean.UserFeed;
import org.trams.business.service.CouponUseService;
import org.trams.business.service.ProgramRegisterService;
import org.trams.business.service.ProgramService;
import org.trams.business.service.ProgramViewService;
import org.trams.business.service.PurchaseService;
//--- Services 
import org.trams.business.service.UserService;


/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("/user")
public class UserController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "user";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "user/create";
	private static final String JSP_LIST   = "user/list";
	private static final String JSP_PROVIDER_LIST   = "user/provider/list";
	private static final String JSP_POPUP_LIST   = "user/popup/list";
	private static final String JSP_FEED_LIST   = "user/feed/list";
	private static final String JSP_FEED_AUDITOR_LIST   = "user/feed_auditor/list";
	private static final String JSP_PAGING   = "user";
	private static final String JSP_EDIT   = "user/edit";
	private static final String JSP_DETAIL   = "user/detail";
	private static final String JSP_LOGIN   = "redirect:/login";

	//--- Main entity service
	@Resource
    private UserService userService; // Injected by Spring
	//--- Other service(s)
	@Resource
	private ProgramService programService;
	
	@Resource
	private ProgramRegisterService programRegisterService;
	
	@Resource
	private CouponUseService couponUseService;
	
	@Resource
	private PurchaseService purchaseService;
	
	@Resource
	private ProgramViewService programViewService;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public UserController() {
		super(UserController.class, MAIN_ENTITY_NAME );
		log("UserController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			userService.update_isDelete(delete);
		}
		Page<UserEntity> listPage = null;
		if(type == ""){
			listPage=userService.listPagingByRole(ApplicationDefine.USER_MEMBER, page, PAGE_SIZE);
		}else if(type.equals("email")){
			listPage=userService.findByNicknameAndEmailAndRole("", key, ApplicationDefine.USER_MEMBER, page, PAGE_SIZE);
		}else if(type.equals("nickname")){
			listPage=userService.findByNicknameAndEmailAndRole(key, "", ApplicationDefine.USER_MEMBER, page, PAGE_SIZE);
		}else{
			listPage=userService.listPagingByRole(ApplicationDefine.USER_MEMBER, page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/user/list");
		new Pager<UserEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}

	@RequestMapping("provider/list")
	public String provider(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			userService.update_isDelete(delete);
		}
		Page<UserEntity> listPage = null;
		if(type == ""){
			listPage=userService.listPagingByRole(ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else if(type.equals("email")){
			listPage=userService.findByNicknameAndEmailAndRole("", key, ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else if(type.equals("nickname")){
			listPage=userService.findByNicknameAndEmailAndRole(key, "", ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else{
			listPage=userService.listPagingByRole(ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/user/provider/list");
		new Pager<UserEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_PROVIDER_LIST;
	}
	
	@RequestMapping("feed/list")
	public String feed(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			userService.update_isDelete(delete);
		}
		List<UserFeed> listPage = new ArrayList<>();
		Calendar c = Calendar.getInstance();
		c.setTime(DataUtils.getNowDate());
		c.add(Calendar.DAY_OF_YEAR, 1);
		Integer total = programRegisterService.totalFeedUser(c.getTime());
		if(type == ""){
			listPage = programRegisterService.listPagingFeedUser(c.getTime(), page, PAGE_SIZE);
		}else if(type.equals("title")){
			listPage = programRegisterService.listPagingFeedUserByTitle(c.getTime(), key, page, PAGE_SIZE);
		}else if(type.equals("nickname")){
			listPage = programRegisterService.listPagingFeedUserByNickname(c.getTime(), key, page, PAGE_SIZE);
		}else{
			listPage = programRegisterService.listPagingFeedUser(c.getTime(), page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/user/list");
		model.addAttribute("param_url", "type="+type+"&amp;key="+key);
		model.addAttribute("totalPage", DataUtils.getTotalPage(total, PAGE_SIZE));
		return JSP_FEED_LIST;
	}
	
	@RequestMapping("feed_auditor/list")
	public String feed_auditor(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			userService.update_isDelete(delete);
		}
		Page<ProgramViewEntity> listPage = null;
		if(type == ""){
			listPage = programViewService.listPaging(page, PAGE_SIZE);
		}else if(type.equals("title")){
			listPage = programViewService.listPagingByUsernameAndTitle("", key, page, PAGE_SIZE);
		}else if(type.equals("nickname")){
			listPage = programViewService.listPagingByUsernameAndTitle(key, "", page, PAGE_SIZE);
		}else{
			listPage = programViewService.listPaging(page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/user/feed_auditor/list");
		model.addAttribute("param_url", "type="+type+"&amp;key="+key);
		new Pager<ProgramViewEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");	
		return JSP_FEED_AUDITOR_LIST;
	}
	
	@RequestMapping("popup/list")
	public String popup(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(delete>0){
			userService.update_isDelete(delete);
		}
		Page<UserEntity> listPage = null;
		if(type == null){
			listPage=userService.listPagingByRole(ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else if(type.equals("email")){
			listPage=userService.findByNicknameAndEmailAndRole("", key, ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else if(type.equals("nickname")){
			listPage=userService.findByNicknameAndEmailAndRole(key, "", ApplicationDefine.USER_PROCEDURE, page, PAGE_SIZE);
		}else{
			listPage=userService.listPaging(page, 12);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/user/provider/list");
		new Pager<UserEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_POPUP_LIST;
	}
	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		User user = userService.findById(id);
		model.addAttribute("user", user);
		model.addAttribute("activePage", nav);
		return JSP_DETAIL;
	}
	
	@RequestMapping("/update/producer/{id}")
	public String producer(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		User user = userService.findById(id);
		user.setRole(1);
		userService.update(user);
		model.addAttribute("user", user);
		model.addAttribute("activePage", nav);
		return "redirect:/"+JSP_PROVIDER_LIST;
	}
	
	@RequestMapping("/update/member/{id}")
	public String member(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		User user = userService.findById(id);
		user.setRole(0);
		userService.update(user);
		model.addAttribute("user", user);
		model.addAttribute("activePage", nav);
		return "redirect:/"+JSP_LIST;
	}
	
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		log("Action 'create'");
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute User user,
			Model model) {
		log("Action 'create'");
		try {
			user.setCreateDate( DataUtils.getNowDate() );
			user.setUpdateDate( DataUtils.getNowDate() );
			userService.create(user);
			return "redirect:/"+JSP_LIST;
		} catch(Exception e) {
			System.out.println(e);
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@RequestParam(value = "page", defaultValue = "1") Integer page,
	@PathVariable("id") Integer id,
	Model model  ) {
		User user = userService.findById(id);
		try {
			if(user.getRole() == ApplicationDefine.USER_MEMBER){
//				Page<ProgramRegisterEntityCustom> listRegister = programRegisterService.listPagingByUserIdCustom(id,page, 50);
				Page<PurchaseEntity> listRegister = purchaseService.listPagingByUserId(id, page, 50);
				model.addAttribute("listRegister",listRegister.getContent());
			}else{
				Page<ProgramEntityCustom> listProgram = programService.listPagingByUserIdCustom(id,page, 50);
				model.addAttribute("listProgram",listProgram.getContent());
			}
			
			Page<CouponUseEntity> listCoupon = couponUseService.listPagingByUserId(page, 100, id);
			List<PurchaseEntity> listPurchase = purchaseService.findByUserId(user.getId(), page, 1);
			if(listPurchase!= null && listPurchase.size() > 0){
				PurchaseEntity p = listPurchase.get(0);
				model.addAttribute("fullname", p.getFullname());
				model.addAttribute("phone", p.getPhone());
			}
			model.addAttribute("now", DataUtils.getNowDate());
			model.addAttribute("item", user);
			model.addAttribute("activePage", nav);
			model.addAttribute("listCoupon",listCoupon.getContent());
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@ModelAttribute User item,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		User user = userService.findById(id);
		try {
			user.setPassword( item.getPassword() );
			user.setNickname( item.getNickname() );
			user.setFullname( item.getFullname() );
			user.setGender( item.getGender() );
			user.setDayOfBirth( item.getDayOfBirth() );
			user.setPhone( item.getPhone() );
			user.setEmail( item.getEmail() );
			user.setAddress( item.getAddress() );
			user.setRole( item.getRole() );
			user.setActive( item.getActive() );
			user.setType( item.getType() );
			user.setToken( item.getToken() );
			user.setFcmToken( item.getFcmToken() );
			user.setPushFcmToken( item.getPushFcmToken() );
			user.setIsDelete( item.getIsDelete() );
			user.setUpdateDate( DataUtils.getNowDate() );
			user = userService.update(user);
			model.addAttribute("item", user);
		} catch(Exception e) {
			System.out.println(e);
		}
		return "redirect:/"+JSP_EDIT+"/"+id;
	}
	
	

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	userService.delete(id);
	return "redirect:/"+JSP_LIST;
	}

}
