/*
 * Created on 13 thg 9 2016 ( Time 16:07:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.trams.bean.CalculateItem;
import org.trams.bean.Program;
//--- Entities
import org.trams.bean.Purchase;
import org.trams.bean.UserItem;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.business.service.ProgramRegisterService;
import org.trams.business.service.ProgramService;
//--- Services 
import org.trams.business.service.PurchaseService;
import org.trams.business.service.UserService;
import org.trams.business.service.mapping.ProgramServiceMapper;
import org.trams.rest.common.notification.Notification;
//--- Common classes
import org.trams.web.common.AbstractController;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.Login;
import org.trams.web.common.Pager;
import org.trams.web.common.utils.DataUtils;

/**
 * Spring MVC controller for 'Purchase' management.
 */
@Controller
@RequestMapping("/purchase")
public class PurchaseController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "purchase";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "purchase";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "purchase/create";
	private static final String JSP_LIST   = "purchase/list";
	private static final String JSP_EDIT   = "purchase/edit";
	private static final String JSP_DETAIL   = "purchase/detail";
	private static final String JSP_DETAIL_PRO   = "purchase/detail/pro";
	private static final String MAIN_LIST_NAME   = "list";
	//--- Main entity service
	@Resource
    private PurchaseService purchaseService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private UserService userService; // Injected by Spring
	
	@Resource
    private ProgramService programService;
	
	@Resource
    private ProgramServiceMapper programServiceMapper;
	
	@Resource
    private ProgramRegisterService programRegisterService;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public PurchaseController() {
		super(PurchaseController.class, MAIN_ENTITY_NAME );
		log("PurchaseController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(	value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			try {
				purchaseService.delete(delete);
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		Page<ProgramEntity> listPage = null;
		UserItem u = Login.getUserLogin(session);
		if(u.getType() == 2){
			if(type == "" || key == ""){
				listPage = programService.listPagingCaculate(page, PAGE_SIZE);
			}else if(type.equals("title")){
				listPage = programService.listPagingCaculateByTitle("%"+key+"%", page, PAGE_SIZE);
			}else if(type.equals("status")){
				Integer status = 3;
				if("미정산".contains(key)){
					status = 0;
				}
				if("정산완료".contains(key)){
					status = 1;
				}
				listPage = programService.listPagingCaculateByStatus(status, page, PAGE_SIZE);
			}
		}else{
			if(type == ""){
				listPage = programService.listPagingCaculateByUserId(u.getId() , page, PAGE_SIZE);
			}else if(type.equals("title")){
				listPage = programService.listPagingCaculateByTitleAndUserId(u.getId(), "%"+key+"%", page, PAGE_SIZE);
			}else if(type.equals("status")){
				Integer status = 3;
				if("미정산".contains(key)){
					status = 0;
				}
				if("정산완료".contains(key)){
					status = 1;
				}
				listPage = programService.listPagingCaculateByStatusAndUserId(u.getId(), status, page, PAGE_SIZE);
			}
		}
		
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/purchase/list");
		new Pager<ProgramEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}
	
	@RequestMapping(value="/detail/pro/{id}", method = RequestMethod.GET)
	public String detail_pro(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		Program p = programService.findById(id);
		model.addAttribute("p", p);
		model.addAttribute("activePage", nav);
		return JSP_DETAIL_PRO;
	}

	
	@RequestMapping(value="/detail/{id}", method = RequestMethod.GET)
	public String detail_get(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		
		ProgramEntity p = programService.findOne(id);
		//PurchaseEntity pr = purchaseService.findByProgramIdAndTeacer(id, 1);
		try {
			programService.updateTotalMoney(id);
			List<CalculateItem> list = purchaseService.listMemberJoinProgram(p.getId());
			model.addAttribute("list", list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		//model.addAttribute("pr", pr);
		
		model.addAttribute("p", p);
		model.addAttribute("activePage", nav);
		return JSP_DETAIL;
	}
	
	@RequestMapping(value="/detail/{id}", method = RequestMethod.POST)
	public String detail_post(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id,
	@RequestParam(value="moneyPaid",defaultValue="") Integer moneyPaid,
	@RequestParam(value="payDate",defaultValue="") String payDate,
	@RequestParam(value="status",defaultValue="") Integer status
	) {
		ProgramEntity pe = programService.findOne(id);
		Program p = programServiceMapper.mapProgramEntityToProgram(pe);
		try {
			p.setMoneyPaid(Long.valueOf(moneyPaid));
			p.setDatePayment(DataUtils.convertStringtoUtilDate(payDate, "yyyy/MM/dd"));
			p.setStatusPayment(status);
			programService.update(p);
			if(status == 1 && pe.getUser().getFcmToken() !=null && pe.getUser().getFcmToken().equals("")){
				List<String> list_reg = new ArrayList<>();
				list_reg.add(pe.getUser().getFcmToken());
				Notification n = new Notification();
				n.sendNotification(list_reg, "정산완료 되었을 때", p.getTitle()+" 에 대한 정산이 완료되었습니다. 세부 사항을 확인해 주세요.", p.getId(),
				ApplicationDefine.NOTIFICATION_FinishPayCourseNotification, 1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}
			
		model.addAttribute("activePage", nav);
		return "redirect:/"+JSP_LIST;
	}
	
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		log("Action 'create'");
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute Purchase purchase,
			Model model) {
		log("Action 'create'");
		try {
			purchase.setCreateDate( DataUtils.getNowDate() );
			purchase.setUpdateDate( DataUtils.getNowDate() );
			
			purchaseService.create(purchase);
			return "redirect:/"+JSP_LIST;
		} catch(Exception e) {
			System.out.println(e);
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Purchase purchase = purchaseService.findById(id);
		try {
			model.addAttribute("item", purchase);
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@ModelAttribute Purchase item,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Purchase purchase = purchaseService.findById(id);
		try {
			purchase.setProgramId( item.getProgramId() );
			purchase.setFullname( item.getFullname() );
			purchase.setPhone( item.getPhone() );
			purchase.setCouponId( item.getCouponId() );
			purchase.setTotalMoney(item.getTotalMoney());
			purchase.setPaymentMethodName( item.getPaymentMethodName() );
			purchase.setTid( item.getTid() );
			purchase.setUpdateDate( DataUtils.getNowDate() );
			purchase = purchaseService.update(purchase);
			model.addAttribute("item", purchase);
		} catch(Exception e) {
			System.out.println(e);
		}
		return "redirect:/"+JSP_EDIT+"/"+id;
	}
	
	

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	purchaseService.delete(id);
	return "redirect:/"+JSP_LIST;
	}

}
