/*
 * Created on 12 thg 9 2016 ( Time 13:52:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.web.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.mail.Multipart;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.ModelAttribute;


//--- Common classes
import org.trams.web.common.AbstractController;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.Pager;
import org.trams.web.common.utils.DataUtils;
import org.trams.web.common.utils.FileUtils;
import org.trams.web.common.Login;
import org.trams.bean.jpa.CommentEntity;
import org.trams.bean.jpa.ContentEntity;
import org.trams.bean.jpa.ContentRelatedEntity;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.Category;
//--- Entities
import org.trams.bean.Content;
import org.trams.bean.ContentRelated;
import org.trams.bean.Program;
import org.trams.business.service.CategoryService;
import org.trams.business.service.CommentService;
import org.trams.business.service.ContentRelatedService;
//--- Services 
import org.trams.business.service.ContentService;
import org.trams.business.service.ProgramService;
import org.trams.business.service.SettingService;
import org.trams.rest.common.notification.Notification;

/**
 * Spring MVC controller for 'Content' management.
 */
@Controller
@RequestMapping("/content")
public class ContentController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "content";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "content";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "content/create";
	private static final String JSP_LIST   = "content/list";
	private static final String JSP_POPUP_LIST   = "content/popup/list";
	private static final String JSP_COMMENT_LIST   = "content/comment";
	private static final String JSP_EDIT   = "content/edit";
	private static final String JSP_DETAIL   = "content/detail";
	private static final String JSP_LOGIN   = "redirect:/login";
	private static final String MAIN_LIST_NAME   = "list";
	//--- Main entity service
	@Resource
    private ContentService contentService; // Injected by Spring
	
	@Resource
    private CategoryService categoryService; // Injected by Spring
	
	@Resource
    private ContentRelatedService contentRelatedService;
	
	@Resource
    private CommentService commentService;
	
	@Resource
    private SettingService settingService;
	
	@Resource
    private ProgramService programService;
	
	@Resource
    private ServletContext servletContext;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ContentController() {
		super(ContentController.class, MAIN_ENTITY_NAME );
		log("ContentController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		if(delete>0){
			try {
				contentService.deleteContent(delete);
			} catch (Exception e) {
				System.out.println(e);
			}
		}
		Page<ContentEntity> listPage = null;
		if(type == ""){
			listPage = contentService.listPaging(page, PAGE_SIZE);
		}
		else if(type.equals("title")){
			listPage = contentService.findByTitle(key, page, PAGE_SIZE);
		}
		else if(type.equals("category")){
			listPage = contentService.findByCategoryName(key, page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/content/list");
		new Pager<ContentEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}
	
	@RequestMapping("/popup/list")
	public String popup(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="number",defaultValue="1") String number,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(type==null){
			type="";
		}
		Page<ContentEntity> listPage = null;
		if(type == ""){
			listPage = contentService.listPaging(page, PAGE_SIZE);
		}
		else if(type.equals("title")){
			listPage = contentService.findByTitle(key, page, PAGE_SIZE);
		}
		else if(type.equals("category")){
			listPage = contentService.findByCategoryName(key, page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("number", number);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/content/popup/list");
		new Pager<ContentEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;number="+number+"&amp;");		
		return JSP_POPUP_LIST;
	}
	
	@RequestMapping("/comment/{id}")
	public String list(
			@PathVariable("id") Integer id,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(delete>0){
			try {
				commentService.delete(delete);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
		Page<CommentEntity> listPage = null;
		listPage=commentService.listPagingByTypeAndThreadId(1, id, page, 20);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/content/comment/"+id);
		new Pager<CommentEntity>(listPage).setSetting(model, "");		
		return JSP_COMMENT_LIST;
	}
	
	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		Content content = contentService.findById(id);
		model.addAttribute("content", content);
		model.addAttribute("activePage", nav);
		return JSP_DETAIL;
	}
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		log("Action 'create'");
		List<Category> list_category = categoryService.findAll();
		model.addAttribute("list_category", list_category);
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute Content content,
			@RequestParam(value="realtiveId1",defaultValue="") Integer realtiveId1,
			@RequestParam(value="realtiveId2",defaultValue="") Integer realtiveId2,
			@RequestParam(value="image") MultipartFile image,
			Model model) {
		log("Action 'create'");
		try {
			try {
				String[] category = content.getCategoryName().split("%");
				content.setCategoryName(category[1]);
				content.setCategoryId(DataUtils.parseInt(category[0]));
			} catch (Exception e) {
				System.out.println(e);
			}
			if(image != null && image.getSize() >0){
				String path = FileUtils.saveFileOrigin(image,"editor", servletContext);
				content.setImageUrl(path);
				System.out.println(image.getOriginalFilename());
				System.out.println(image.getName());
				content.setImageName(image.getOriginalFilename());
				content.setVideoUrl("");
			}else{
				content.setImageUrl("");
				content.setImageName("");
			}
			content.setIsDelete(0);
			content.setUpdateDate( DataUtils.getNowDate() );
			content.setCreateDate( DataUtils.getNowDate() );
			Content create= contentService.create(content);
			List<Integer> list_programId = new ArrayList<>();
			if(realtiveId1 != null){
				ContentRelated cr = new ContentRelated();
				cr.setContentRelatedId(create.getId());
				cr.setCreateDate(DataUtils.getNowDate());
				cr.setProgramId(realtiveId1);
				cr.setUpdateDate(DataUtils.getNowDate());
				contentRelatedService.create(cr);
				ProgramEntity p = programService.findByIdEntity(realtiveId1);
				list_programId.add(realtiveId1);
			}
			if(realtiveId2 != null){
				ContentRelated cr = new ContentRelated();
				cr.setContentRelatedId(create.getId());
				cr.setCreateDate(DataUtils.getNowDate());
				cr.setProgramId(realtiveId1);
				cr.setUpdateDate(DataUtils.getNowDate());
				contentRelatedService.create(cr);
				ProgramEntity p = programService.findByIdEntity(realtiveId2);
				list_programId.add(realtiveId2);
			}

			return "redirect:/"+JSP_LIST;
		} catch(Exception e) {
			System.out.println(e);
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Content content = contentService.findById(id);
		try {
			List<Category> list_category = categoryService.findAll();
			List<ProgramEntity> list_relate = contentRelatedService.findProgramRelateByContentId(id);
			model.addAttribute("list_relate", list_relate);
			model.addAttribute("list_category", list_category);
			model.addAttribute("c", content);
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@RequestParam (value="image") MultipartFile  image,
	@RequestParam(value="realtiveId1",defaultValue="") Integer realtiveId1,
	@RequestParam(value="realtiveId2",defaultValue="") Integer realtiveId2,
	@ModelAttribute Content item,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		Content content = contentService.findById(id);
		try {
			try {
				String[] category = item.getCategoryName().split("%");
				content.setCategoryName(category[1]);
				content.setCategoryId(DataUtils.parseInt(category[0]));
			} catch (Exception e) {
				System.out.println(e);
			}
			if(image != null && image.getSize() >0){
				String path = FileUtils.saveFileOrigin(image,"upload", servletContext);
				content.setImageUrl(path);
				content.setImageName(image.getOriginalFilename());
				content.setVideoUrl("");
			}else if(item.getVideoUrl() != null){
				content.setImageUrl("");
				content.setVideoUrl( item.getVideoUrl() );
			}
			content.setTitle( item.getTitle() );
			content.setSummary( item.getSummary() );
			content.setContent( item.getContent() );
			content.setUpdateDate( DataUtils.getNowDate() );
			content = contentService.update(content);
			contentRelatedService.deleteByContentId(id);
			try {
				if(realtiveId1 != null){
					ContentRelated cr = new ContentRelated();
					cr.setContentRelatedId(id);
					cr.setCreateDate(DataUtils.getNowDate());
					cr.setProgramId(realtiveId1);
					cr.setUpdateDate(DataUtils.getNowDate());
					contentRelatedService.create(cr);
				}
				if(realtiveId2 != null){
					ContentRelated cr = new ContentRelated();
					cr.setContentRelatedId(id);
					cr.setCreateDate(DataUtils.getNowDate());
					cr.setProgramId(realtiveId2);
					cr.setUpdateDate(DataUtils.getNowDate());
					contentRelatedService.create(cr);
				}
			} catch (Exception e) {
				System.out.println("Create Program Relete have error!!!");
				System.out.println(e);
			}
			
			model.addAttribute("item", content);
		} catch(Exception e) {
			System.out.println(e);
		}
		return "redirect:/"+JSP_EDIT+"/"+id;
	}
	
	

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	contentService.delete(id);
	return "redirect:/"+JSP_LIST;
	}

}
