/*
 * Created on 23 thg 8 2016 ( Time 16:25:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.bean.UserItem;
import org.trams.bean.Program;
import org.trams.bean.QuestionAnswer;
import org.trams.bean.User;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.jpa.QuestionAnswerEntity;
import org.trams.business.service.ProgramService;
import org.trams.business.service.QuestionAnswerService;
import org.trams.business.service.UserService;
import org.trams.rest.common.AbstractRestController;
import org.trams.rest.common.AuthorizationToken;
import org.trams.rest.common.notification.Notification;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.utils.DataUtils;

/**
 * Spring MVC controller for 'QuestionAnswer' management.
 */
@RequestMapping("/questionAnswer")
@Controller
public class QuestionAnswerRestController extends AbstractRestController{

	@Resource
	private QuestionAnswerService questionAnswerService;
	
	@Resource
	private UserService userService;
	
	@Resource
	private ProgramService programService;
		
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token") String token
	) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			List<QuestionAnswer> list = questionAnswerService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
	} 

	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	@RequestHeader(value="token") String token
		) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			QuestionAnswer item= questionAnswerService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody QuestionAnswer item
	) {
	try{
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setAskDate(DataUtils.getNowDate());
			item.setAnswer("");
			item.setAskUserId(user.getId());
			item.setCreateDate(DataUtils.getNowDate());
			item.setUpdateDate(DataUtils.getNowDate());
			QuestionAnswer create= questionAnswerService.create(item);
			if(create!= null){
					ProgramEntity p = programService.findOne(item.getProgramId());
					if(p.getUser().getFcmToken() != null && !p.getUser().getFcmToken().equals("")){
						List<String> list_reg = new ArrayList<>();
						list_reg.add(p.getUser().getFcmToken());
						Notification n = new Notification();
						n.sendNotification(list_reg, "내 프로그램에 질문이 등록되었을 때", p.getTitle()+"에 대한 질문이 등록되었습니다. 답변을 달아주세요!", p.getId(),
						ApplicationDefine.NOTIFICATION_PostQuestionCourseNotification, 1);
					}
				
			}
			return SUCCESS(create);
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody QuestionAnswer item
	) {
	try{
			UserItem user =AuthorizationToken.convertToObject(token);
			QuestionAnswer qa= questionAnswerService.findById(item.getId());
			if(item.getAnswer() != null || !item.getAnswer().equals("")){
				qa.setAnswerDate(DataUtils.getNowDate());
				qa.setUpdateDate(DataUtils.getNowDate());
				qa.setAnswer(item.getAnswer());
				qa.setAnswerUserId(user.getId());
			}else{
				qa.setAnswerDate(null);
				qa.setAnswer("");
				qa.setAnswerUserId(null);
			}
			qa=questionAnswerService.update(qa);
			return SUCCESS(qa);
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				questionAnswerService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				System.out.println(e);
				return FAIL("HAVE ERROR: "+e);
		}
	}
	
}



