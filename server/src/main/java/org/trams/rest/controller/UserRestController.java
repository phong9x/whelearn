/*
 * Created on 22 thg 8 2016 ( Time 15:19:03 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.rest.controller;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.bean.UserItem;
import org.trams.bean.User;
import org.trams.bean.jpa.UserEntity;
import org.trams.business.service.UserService;
import org.trams.rest.common.AbstractRestController;
import org.trams.rest.common.AuthorizationToken;
import org.trams.web.common.utils.DataUtils;
/**
 * Spring MVC controller for 'User' management.
 */
@RequestMapping("/user")
@Controller
public class UserRestController extends AbstractRestController{

	@Resource
	private UserService userService;
	
			@RequestMapping(value = "/login", method = { RequestMethod.POST,
	RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(@RequestBody User user, HttpSession session) {
		try {
			String password = DataUtils.getMD5(user.getPassword());
			User u = userService.login(user.getEmail(), password);
			if (u != null && u.getRole() == 0) {
				u.setToken(AuthorizationToken.generateTokenMobile(u));
				return SUCCESS(u);
			} else {
				return SUCCESS("Username and password is not match");
			}
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}
			
			
			
			@RequestMapping(value = "/send_sms", method = { RequestMethod.POST,
					RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
			@ResponseStatus(HttpStatus.OK)
			@ResponseBody
			public HashMap<String, Object> get_authentication(@RequestBody User user) {
				try {
					String code = DataUtils.getMD5(user.getPhone()).substring(0, 6);
					return SUCCESS(code,"Process success!");
				} catch (Exception e) {
					System.out.println(e);
					return FAIL("HAVE ERROR: " + e);
				}

			}
			
			@RequestMapping(value = "/check_authentication", method = { RequestMethod.POST,
					RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
			@ResponseStatus(HttpStatus.OK)
			@ResponseBody 
			public HashMap<String, Object> check_authentication(@RequestBody String json) {
				try {
					
					JSONParser parser = new JSONParser();
					JSONObject jsonObj = (JSONObject) parser.parse(json);
					String auth =jsonObj.get("auth").toString();
					String phone =jsonObj.get("phone").toString();
					String code = DataUtils.getMD5(phone).substring(0, 6);
					System.out.println(auth);
					System.out.println(code);
					if (!auth.equals(code)) {
						return FAIL();
					} else {
						return SUCCESS();
					}
				} catch (Exception e) {
					System.out.println(e);
					return FAIL("HAVE ERROR: " + e);
				}

			}		
			
			@RequestMapping(value = "/check_password", method = { RequestMethod.POST,
					RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
			@ResponseStatus(HttpStatus.OK)
			@ResponseBody 
			public HashMap<String, Object> check_password(
					@RequestBody User user,
					@RequestHeader(value="token") String token
					) {
				try {
					HashMap<String, Object> ret = new HashMap<>();
					String pass = DataUtils.getMD5(user.getPassword());
					UserItem u =AuthorizationToken.convertToObject(token);
					User user_token = userService.findById(u.getId());
					if(pass.equals(user_token.getPassword())){
						ret.put("exists", 1);
						return SUCCESS(ret);
					}else{
						ret.put("exists", 0);
						return SUCCESS(ret);
					}
					
					
				} catch (Exception e) {
					System.out.println(e);
					return FAIL("HAVE ERROR: " + e);
				}

			}		
			
			@RequestMapping(value = "/check_email", method = { RequestMethod.POST,
					RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
			@ResponseStatus(HttpStatus.OK)
			@ResponseBody
			public HashMap<String, Object> check_username(
					@RequestHeader(value="token") String token,
					@RequestBody User user) {
				HashMap<String, Object> exists = new HashMap<String, Object>();
				try {
					UserItem u =AuthorizationToken.convertToObject(token);
					User userLogin = userService.findById(u.getId());
					if(userLogin ==null){
						return FAIL("User is not exists" );
					}
					if(userLogin.getEmail().trim().equals(user.getEmail().trim())){
						exists.put("exists", 0);
						return SUCCESS(exists);
					}
					List<UserEntity> list = new ArrayList<UserEntity>();
					list = userService.findByEmail(user.getEmail());
					if (list != null && list.size() > 0) {
						exists.put("exists", 1);
					} else {
						exists.put("exists", 0);
					}
					return SUCCESS(exists);
				} catch (Exception e) {
					System.out.println(e);
					return FAIL("HAVE ERROR: " + e);
				}
			}
			
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token") String token
	) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			List<User> list = userService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody String json
	) throws ParseException {
		//UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<UserEntity> list = userService.findAll(page);
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@RequestHeader(value="token") String token
		) {
		UserItem user =AuthorizationToken.convertToObject(token);
		try {
			User item= userService.findById(user.getId());
			
			if(item!=null){
				if(item.getDayOfBirth() == null){
					item.setDayOfBirth(DataUtils.getNowDate());
				}
				return SUCCESS(item);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody User item
	) {
	try{
			item.setIsDelete(0);
			item.setCreateDate(DataUtils.getNowDate());
			item.setUpdateDate(DataUtils.getNowDate());
			User create= userService.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	@RequestHeader(value="token",required=false) String token,
	@RequestHeader(value="newPassword",required=false) String newPassword,
	@RequestBody User item
	) {
	try{
			
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setUpdateDate(DataUtils.getNowDate());
			User u = userService.findById(user.getId());
			if(u.getPassword().equals(DataUtils.getMD5(item.getPassword()))){
				u.setEmail(item.getEmail());
				if(newPassword != null && !newPassword.equals("")){
					u.setPassword(DataUtils.getMD5(newPassword));
				}
				u.setDayOfBirth(item.getDayOfBirth());
				u.setGender(item.getGender());
				u.setNickname(item.getNickname());
				User edit=userService.update(u);
				return SUCCESS(edit);
			}else{
				return SUCCESS(null,"Password is not match");
			}
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				userService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				System.out.println(e);
				return FAIL("HAVE ERROR: "+e);
		}
	}
	
	@RequestMapping( value="/remove",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> update_delete(
	@RequestHeader(value="token",required=false) String token) {
		try{
			UserItem user =AuthorizationToken.convertToObject(token);
			userService.update_isDelete(user.getId());
			return SUCCESS();
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}
}



