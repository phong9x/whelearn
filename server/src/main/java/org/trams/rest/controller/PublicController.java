/*
 * Created on 22 thg 8 2016 ( Time 15:19:03 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.rest.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.trams.bean.Category;
import org.trams.bean.CategoryCount;
import org.trams.bean.Company;
import org.trams.bean.Content;
import org.trams.bean.CouponUse;
import org.trams.bean.Event;
import org.trams.bean.Program;
import org.trams.bean.ProgramCalendar;
import org.trams.bean.ProgramSimple;
import org.trams.bean.QuestionAnswerItem;
import org.trams.bean.Setting;
import org.trams.bean.User;
import org.trams.bean.UserItem;
import org.trams.bean.WheLearn;
import org.trams.bean.jpa.CommentEntity;
import org.trams.bean.jpa.ContentEntity;
import org.trams.bean.jpa.EventEntity;
import org.trams.bean.jpa.FaqEntity;
import org.trams.bean.jpa.LikesEntity;
import org.trams.bean.jpa.NoticeEntity;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.bean.jpa.ProgramViewEntity;
import org.trams.bean.jpa.PurchaseEntity;
import org.trams.bean.jpa.TimeLearnEntity;
import org.trams.bean.jpa.UserEntity;
import org.trams.business.service.CategoryCountService;
import org.trams.business.service.CategoryService;
import org.trams.business.service.CommentService;
import org.trams.business.service.CompanyService;
import org.trams.business.service.ContentRelatedService;
import org.trams.business.service.ContentService;
import org.trams.business.service.ContentsRecomService;
import org.trams.business.service.CouponUseService;
import org.trams.business.service.EventService;
import org.trams.business.service.FaqService;
import org.trams.business.service.KeywordService;
import org.trams.business.service.LikesService;
import org.trams.business.service.NoticeService;
import org.trams.business.service.ProgramRegisterService;
import org.trams.business.service.ProgramService;
import org.trams.business.service.ProgramViewService;
import org.trams.business.service.PurchaseService;
import org.trams.business.service.QuestionAnswerService;
import org.trams.business.service.SettingService;
import org.trams.business.service.TimeLearnService;
import org.trams.business.service.UserService;
import org.trams.business.service.mapping.ContentServiceMapper;
import org.trams.business.service.mapping.ProgramServiceMapper;
import org.trams.business.service.mapping.TimeLearnServiceMapper;
import org.trams.business.service.mapping.UserServiceMapper;
import org.trams.common.mail.Mail;
import org.trams.data.repository.jpa.ProgramJpaRepository;
import org.trams.rest.common.AbstractRestController;
import org.trams.rest.common.AuthorizationToken;
import org.trams.rest.common.notification.Notification;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.utils.DataUtils;
import org.trams.web.common.utils.FileUtils;
import org.trams.web.service.RecommendService;

/**
 * Spring MVC controller for 'User' management.
 */
@RequestMapping("/public")
@Controller
public class PublicController extends AbstractRestController {

	@Resource
	private KeywordService keywordService;

	@Resource
	private QuestionAnswerService questionAnswerService;

	@Resource
	private ProgramService programService;

	@Resource
	private ProgramRegisterService programRegisterService;

	@Resource
	private PurchaseService purchaseService;

	@Resource
	private TimeLearnService timeLearnService;

	@Resource
	private TimeLearnServiceMapper timeLearnServiceMapper;

	@Resource
	private ProgramServiceMapper programServiceMapper;

	@Resource
	private UserService userService;

	@Resource
	private UserServiceMapper userServiceMapper;

	@Resource
	private ContentService contentService;

	@Resource
	private ContentsRecomService contentsRecomService;

	@Resource
	private ContentServiceMapper contentServiceMapper;

	@Resource
	private CouponUseService couponUseService;

	@Resource
	private LikesService likesService;

	@Resource
	private SettingService settingService;

	@Resource
	private CommentService commentService;

	@Resource
	private NoticeService noticeService;

	@Resource
	private FaqService faqService;

	@Resource
	private EventService eventService;

	@Resource
	private ContentRelatedService contentRelatedService;

	@Resource
	private CompanyService companyService;

	@Resource
	private ProgramViewService programViewService;

	@Resource
	private CategoryService categoryService;

	@Resource
	private ProgramJpaRepository programJpaRepository;

	@Resource
	private ServletContext servletContext;

	@Resource
	private RecommendService recommendService;
	
	@Resource
	private CategoryCountService categoryCountService;
	
	
	@RequestMapping(value = "/login", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(@RequestBody User user, HttpSession session) {
		try {
			String password = DataUtils.getMD5(user.getPassword());
			User u = userService.login(user.getEmail(), password);
			if (u != null && (u.getRole() == 1 || u.getRole() == 0)) {
				try {
					userService.updatePushFcmToken(user.getFcmToken());
					u.setFcmToken(user.getFcmToken());
					u.setPushFcmToken(1);
					User update = userService.update(u);
					System.out.println(update.getPushFcmToken());
				} catch (Exception e) {
					e.printStackTrace();
				}
				u.setToken(AuthorizationToken.generateTokenMobile(u));
				return SUCCESS(u);
			} else {
				return SUCCESS("Username and password is not match");
			}
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/register", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(@RequestBody User item) {
		try {
			userService.updatePushFcmToken(item.getFcmToken());
			item.setPushFcmToken(1);
			item.setPassword(DataUtils.getMD5(item.getPassword()));
			item.setRole(0);
			item.setType(1);
			item.setPushFcmToken(0);
			item.setIsDelete(0);
			item.setCreateDate(DataUtils.getNowDate());
			item.setUpdateDate(DataUtils.getNowDate());
			User create = userService.create(item);
			create.setToken(AuthorizationToken.generateTokenMobile(create));
			if (create != null) {
				try {
					Setting s = new Setting();
					s.setId(create.getId());
					s.setUploadContentNotification(1);
					s.setOpenCourseNotification(1);
					s.setCommentNotification(1);
					s.setCouponNotification(1);
					s.setNoticeNotification(1);
					s.setFinishPayCourseNotification(1);
					s.setFinishRegisterCourseNotification(1);
					s.setPostCommentCourseNotification(1);
					s.setPostQuestionCourseNotification(1);
					s.setCreateDate(DataUtils.getNowDate());
					s.setUpdateDate(DataUtils.getNowDate());
					settingService.create(s);

					CouponUse c1 = new CouponUse();
					c1.setCouponId(1);
					c1.setCreateDate(DataUtils.getNowDate());
					Calendar ca = Calendar.getInstance();
					ca.setTime(DataUtils.getNowDate());
					ca.add(Calendar.DAY_OF_YEAR, 90);
					c1.setDeadline(ca.getTime());
					c1.setStatusUse(0);
					c1.setUpdateDate(DataUtils.getNowDate());
					c1.setUserId(create.getId());
					couponUseService.create(c1);

					CouponUse c2 = new CouponUse();
					c2.setCouponId(2);
					c2.setCreateDate(DataUtils.getNowDate());
					ca.setTime(DataUtils.getNowDate());
					ca.add(Calendar.DAY_OF_YEAR, 30);
					c2.setDeadline(ca.getTime());
					c2.setStatusUse(0);
					c2.setUpdateDate(DataUtils.getNowDate());
					c2.setUserId(create.getId());
					couponUseService.create(c2);
					
					CouponUse c3 = new CouponUse();
					c3.setCouponId(3);
					c3.setCreateDate(DataUtils.getNowDate());
					ca.setTime(DataUtils.getNowDate());
					ca.add(Calendar.DAY_OF_YEAR, 30);
					c3.setDeadline(ca.getTime());
					c3.setStatusUse(0);
					c3.setUpdateDate(DataUtils.getNowDate());
					c3.setUserId(create.getId());
					couponUseService.create(c3);

					CouponUse c4 = new CouponUse();
					c4.setCouponId(4);
					c4.setCreateDate(DataUtils.getNowDate());
					ca.setTime(DataUtils.getNowDate());
					ca.add(Calendar.DAY_OF_YEAR, 30);
					c4.setDeadline(ca.getTime());
					c4.setStatusUse(0);
					c4.setUpdateDate(DataUtils.getNowDate());
					c4.setUserId(create.getId());
					couponUseService.create(c4);
					List<String> list_reg = new ArrayList<>();
					list_reg.add(create.getFcmToken());
					Notification n = new Notification();
					n.sendNotification(list_reg, "쿠폰 발행 및 만료 알림", "가입 감사 쿠폰이 발행되었습니다. 쿠폰 관리 페이지를 확인해 주세요!", null,
							ApplicationDefine.NOTIFICATION_CouponNotification, 1);
				} catch (Exception e) {
					System.out.println(e);
				}

			}
			return SUCCESS(create);
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/check_email", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> check_username(@RequestBody User user) {
		HashMap<String, Object> exists = new HashMap<String, Object>();
		try {
			List<UserEntity> list = new ArrayList<UserEntity>();
			list = userService.findByEmail(user.getEmail());
			if (list != null && list.size() > 0) {
				exists.put("exists", 1);
			} else {
				exists.put("exists", 0);
			}
			return SUCCESS(exists);
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/find_email", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> find_id(@RequestBody User user, HttpSession session) {
		try {
			List<String> list = userService.findByDayOfBirthAndGender(user.getDayOfBirth(), user.getGender());
			if (list == null) {
				return SUCCESS(null, "가입되지 않은 정보입니다");
			}
			HashMap<String, Object> ret = new HashMap<>();
			ret.put("list", list);
			return SUCCESS(ret);
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/company", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> company(HttpSession session) {
		try {
			List<Company> list = companyService.findAll();
			HashMap<String, Object> ret = new HashMap<>();
			if (list != null && list.size() > 0) {
				ret.put("image", list.get(0).getImageUrl());
			} else {
				ret.put("image", "");
			}
			return SUCCESS(ret);
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/notice/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllNoticePaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody(required = true) String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<NoticeEntity> list = noticeService.listPaging(page, 12);
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/faq/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllFaqPaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Integer type = DataUtils.parseInt(jsonObj.get("type"));
			Page<FaqEntity> list = null;
			if (type == 0) {
				list = faqService.listPaging(page, 12);
			} else {
				list = faqService.listPagingByCategoryId(type, page, 10);
			}
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/find_password", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> find_password(@RequestBody User user, HttpSession session) {
		try {
			User u = userService.findByDayOfBirthAndGenderAndEmail(user.getDayOfBirth(), user.getGender(),
					user.getEmail());
			if (u != null) {
				String password = DataUtils.getStringRandom(6);
				u.setPassword(DataUtils.getMD5(password));
				System.out.println("Begin send mail");
				boolean ok = Mail.sendMailAmazon("[Whelearn]비밀번호 찾기", "새로운 비밀번호: " + password, u.getEmail());
				System.out.println("Sending mail");
				if (ok == true) {
					User edit = userService.update(u);
					System.out.println("Send email success");
					return SUCCESS(edit);
				} else {
					System.out.println("Send email is not success");
					return FAIL("Send email is not success!");
				}
			} else {
				return SUCCESS(null, "User is not exists!");
			}
		} catch (Exception e) {
			System.out.println(e);
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/upload/image", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.TEXT_HTML_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String upload_image(@RequestParam(value = "upload", required = false) MultipartFile file,
			@RequestParam(value = "type", required = false) String filename,
			@RequestParam(value = "CKEditorFuncNum", required = false) String CKEditorFuncNum) {

		try {
			String path = FileUtils.uploadImageEditor(file, "editor", servletContext);
			String message = "";
			if (path.equals("")) {

				message = "Upload fail";

			} else {

				message = "uploadSuccess";
			}

			return "<!DOCTYPE html><html><head></head><body>" + "<script>window.parent.CKEDITOR.tools.callFunction("
					+ CKEditorFuncNum + ", '" + path + "');</script>" + "</body></html>";

		} catch (Exception e) {
			System.out.println(e);
		}
		return null;
	}

	@RequestMapping(value = "/questionAnswer/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPagingProgram(@RequestHeader(value = "token", required = false) String token,
			@RequestBody String json) throws ParseException {
		UserItem user = AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Integer programId = DataUtils.parseInt(jsonObj.get("programId"));
			Integer size = 12;
			List<QuestionAnswerItem> list = questionAnswerService.listByProgramId(programId, page, size);
			Integer total = questionAnswerService.totalByProgramId(programId);
			if (user != null && user.getId() != null) {
				User u = userService.findById(user.getId());
				if (u == null) {
					return FAIL("User is not exists");
				}
				if (u.getRole() == ApplicationDefine.USER_MEMBER) {
					ret.put("procuder_memeber", 0);
				} else if (u.getRole() == ApplicationDefine.USER_PROCEDURE
						|| u.getRole() == ApplicationDefine.USER_ADMIN) {
					ret.put("procuder_memeber", 1);
				}
			}
			if (list != null) {
				ret.put("list", list);
				ret.put("page", page);
				ret.put("totalPage", Math.ceil((double) total / (double) 12));
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/content/item/{id}", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(@PathVariable("id") Integer id,
			@RequestHeader(value = "token", required = false) String token) {
		UserItem user = new UserItem();
		try {
			user = AuthorizationToken.convertToObject(token);
		} catch (Exception e) {
			// TODO: handle exception
		}
		try {
			Content item = contentService.findById(id);
			item.setIsLike(0);
			if (item.getId() != null && user != null) {
				LikesEntity liked = likesService.findByUserIdAndThreadIdAndType(user.getId(), item.getId(), 1);
				if (liked != null) {
					item.setIsLike(1);
				}
				updateCategoryCount(user.getId(), item.getCategoryId());
			}
			List<ProgramEntity> list_relate = contentRelatedService.findProgramRelateByContentId(id);
			List<Program> list = new ArrayList<>();
			for (ProgramEntity i : list_relate) {
				Program p = programServiceMapper.mapProgramEntityToProgram(i);
				list.add(p);
			}
			item = contentService.update(item);
			HashMap<String, Object> ret = new HashMap<>();
			ret.put("content", item);
			ret.put("programRelate", list);
			
			return SUCCESS(ret);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	private void updateCategoryCount(Integer userId, Integer categoryId){
		CategoryCount categoryCount = categoryCountService.findByUserIdAndCategoryId(userId, categoryId);
		if(categoryCount == null){
			categoryCount = new CategoryCount();
			categoryCount.setId(0);
			categoryCount.setUserId(userId);
			categoryCount.setCategoryId(categoryId);
			categoryCount.setCount(1);
			categoryCountService.create(categoryCount);
		}else{
			categoryCount.setCount(categoryCount.getCategoryId() + 1);
			categoryCountService.update(categoryCount);
		}
	}
	
	@RequestMapping(value = "/contents", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody(required = true) String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			List<ContentEntity> list_content = contentsRecomService.listPagingAllContent();
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<ContentEntity> list = contentService.listPaging(page, 12);
			if (list.getContent() != null) {
				List<Content> result = new ArrayList<>();
				for (ContentEntity i : list) {
					Content c = contentServiceMapper.mapContentEntityToContent(i);
					result.add(c);
				}
				ret.put("list", result);
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
			} else {
				ret.put("list", null);
				ret.put("page", 0);
				ret.put("totalPage", 0);
			}
			ret.put("contents", list_content);
			return SUCCESS(ret);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/program/calendar", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllCalendar(@RequestHeader(value = "token", required = false) String token,
			@RequestBody(required = true) String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer month = DataUtils.parseInt(jsonObj.get("month"));
			Integer year = DataUtils.parseInt(jsonObj.get("year"));
			List<TimeLearnEntity> list = null;
			list = timeLearnService.findByMontYear(month, year);
			TimeLearnEntity t = new TimeLearnEntity();
			if (list != null) {
				List<ProgramCalendar> calendar = new ArrayList<>();
				HashMap<String, Object> ret = new HashMap<>();
				int color = 1;
				int index = -1;
				Date before = null;
				for (TimeLearnEntity i : list) {
					if (before != null && before.equals(i.getDateLearn())) {
						ProgramCalendar c = calendar.get(index);
						List<ProgramSimple> list_simple = c.getProgramSimple();
						ProgramSimple p = new ProgramSimple();
						p.setColor(color);
						p.setId(i.getProgram().getId());
						p.setTitle("[" + i.getProgram().getCategoryName() + "]" + i.getProgram().getTitle());
						list_simple.add(p);
						c.setProgramSimple(list_simple);
						calendar.remove(c);
						calendar.add(index, c);
					} else {
						ProgramCalendar c = new ProgramCalendar();
						ProgramSimple p = new ProgramSimple();
						List<ProgramSimple> list_simple = new ArrayList<>();
						p.setColor(color);
						p.setId(i.getProgram().getId());
						p.setTitle("[" + i.getProgram().getCategoryName() + "]" + i.getProgram().getTitle());
						list_simple.add(p);
						c.setProgramSimple(list_simple);
						c.setDate(i.getDateLearn().getDate());
						calendar.add(c);
						index++;
					}
					if (color == 7) {
						color = 1;
					} else {
						color++;
					}
					before = i.getDateLearn();
				}
				ret.put("year", year);
				ret.put("month", month);
				ret.put("calendar", calendar);
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/program/{id}", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findProgram(@PathVariable("id") Integer id,
			@RequestHeader(value = "token", required = false) String token) {
		UserItem user = AuthorizationToken.convertToObject(token);
		try {
			Program item = programService.findById(id);
			List<TimeLearnEntity> list_time_entity = timeLearnService.findByProgramId(id);
			List<String> list_time = new ArrayList<>();
			for (TimeLearnEntity i : list_time_entity) {
				Calendar c = Calendar.getInstance();
				c.setTime(i.getDateLearn());
				Integer day = c.get(Calendar.DAY_OF_WEEK);
				String str_day;
				if (day == 2) {
					str_day = "월";
				} else if (day == 3) {
					str_day = "화";
				} else if (day == 4) {
					str_day = "수";
				} else if (day == 5) {
					str_day = "목";
				} else if (day == 6) {
					str_day = "금";
				} else if (day == 7) {
					str_day = "토";
				} else {
					str_day = "일";
				}
				String time = DataUtils.convertDate_To_String(i.getDateLearn(), "MM/dd") + "("+str_day+") "
						+ DataUtils.convertDate_To_String(i.getFromTime(), "HH:mm") + "-"
						+ DataUtils.convertDate_To_String(i.getToTime(), "HH:mm");
				list_time.add(time);
			}
			item.setIsLike(0);
			if (item != null && user != null) {
				LikesEntity liked = likesService.findByUserIdAndThreadIdAndType(user.getId(), item.getId(), 2);
				if (liked != null) {
					item.setIsLike(1);
				}
			}
			HashMap<String, Object> ret = new HashMap<>();
			List<Program> list_relative = programService.findByProgramRelative(item.getCategoryId(), item.getId());
			if (user != null && user.getId() != null) {
				List<PurchaseEntity> list_pr = purchaseService.findByUserIdAndProgramId(user.getId(), id);
				if (list_pr != null && list_pr.size() > 0) {
					ret.put("userRegistered", 1);
				} else {
					ret.put("userRegistered", 0);
				}
			} else {
				ret.put("userRegistered", 0);
			}
			if (user != null && user.getId() != null) {
				List<ProgramViewEntity> list_pv = programViewService.listPagingByUserIdAndProgramId(user.getId(), id);
				if (list_pv != null && list_pv.size() > 0) {
					ret.put("userHear", 1);
				} else {
					ret.put("userHear", 0);
				}
			} else {
				ret.put("userHear", 0);
			}
			Calendar c = Calendar.getInstance();
			c.setTime(item.getDeadLine());
			Integer day = c.get(Calendar.DAY_OF_WEEK);
			String str_day = "";
			if (day == 2) {
				str_day = "월";
			} else if (day == 3) {
				str_day = "화";
			} else if (day == 4) {
				str_day = "수";
			} else if (day == 5) {
				str_day = "목";
			} else if (day == 6) {
				str_day = "금";
			} else if (day == 7) {
				str_day = "토";
			} else {
				str_day = "일";
			}
			
			Integer totalQuetion = questionAnswerService.totalByProgramId(id);
			String str_date = DataUtils.convertDate_To_String(item.getDeadLine(),
					"yyyy년 MM월 dd일(" + str_day + ")HH:mm");
			Category cat = categoryService.findById(item.getCategoryId());
			if (cat.getCount() == null) {
				cat.setCount(1);
			} else {
				cat.setCount(cat.getCount() + 1);
			}
			categoryService.update(cat);
			ret.put("deadLineString", str_date);
			ret.put("totalQuestion", totalQuetion);
			ret.put("program", item);
			ret.put("timeLearn", list_time);
			ret.put("programRelative", list_relative);
			return SUCCESS(ret);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/content/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllContentPaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody(required = true) String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			String keyword = jsonObj.get("keyword").toString();
			Page<ContentEntity> list = null;
			if (keyword == null || keyword.equals("")) {
				list = contentService.listPaging(page, 12);
			} else {
				list = contentService.findByTitle(keyword, page, 12);
			}
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@RequestMapping(value = "/program/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllProjectPaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody(required = true) String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			String keyword = jsonObj.get("keyword").toString();
			Page<ProgramEntity> list = null;
			if (keyword == null || keyword.equals("")) {
				list = programService.listPaging(page, 12);
			} else {
				list = programService.findByTitle("%" + keyword + "%", page, 12);
			}
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/whelearn", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> rank(@RequestHeader(value = "token", required = false) String token)
			throws ParseException {
		UserItem user = AuthorizationToken.convertToObject(token);
		try {
			List<WheLearn> list = new ArrayList<>();
			
			if (user != null && user.getId() != null) {
				Integer userId = user.getId();
				// set keyword string
				Map<String, Object> keywordList = recommendService.getKeyWordListByUserId(userId, 1);
				System.out.println("keywordList: " + keywordList.toString());
				List<String> keywordStr = (List<String>) keywordList.get("keyword");
				
				if (keywordStr.size() < 12) {
					Integer size = 12 - keywordStr.size();
					for (int i = 0; i < size; i++) {
						keywordStr.add("");
					}
				}
				WheLearn whelearnA = new WheLearn();

				whelearnA.setListKeyword(keywordStr);
				whelearnA.setType(1);
				list.add(whelearnA);
				
				//set recommended program
				Integer categoryId = categoryCountService.getFirstCategoryIdByUserId(userId);
				Map<String, Object> keywordId = (Map<String, Object>) keywordList.get("keywordId");
				//all
				WheLearn whelearnB = new WheLearn();
				whelearnB.setListProgram(recommendService.getRecommendPrograms(userId, categoryId, keywordId, 1));
				whelearnB.setType(2);
				list.add(whelearnB);
				//teacher
				WheLearn whelearnC = new WheLearn();
				whelearnC.setListProgram(recommendService.getRecommendPrograms(userId, categoryId, keywordId, 2));
				whelearnC.setType(3);
				List<String> keywordStrC = (List<String>) recommendService.getKeyWordListByUserId(userId, 2).get("keyword");
				whelearnC.setListKeyword(keywordStrC);
				list.add(whelearnC);
				//time
				WheLearn whelearnD = new WheLearn();
				whelearnD.setListProgram(recommendService.getRecommendPrograms(userId, categoryId, keywordId, 3));
				whelearnD.setType(4);
				List<String> keywordStrD = (List<String>) recommendService.getKeyWordListByUserId(userId, 3).get("keyword");
				whelearnD.setListKeyword(keywordStrD);
				list.add(whelearnD);
				//price
				WheLearn whelearnE = new WheLearn();
				whelearnE.setListProgram(recommendService.getRecommendPrograms(userId, categoryId, keywordId, 4));
				whelearnE.setType(5);
				List<String> keywordStrE = (List<String>) recommendService.getKeyWordListByUserId(userId, 4).get("keyword");
				whelearnE.setListKeyword(keywordStrE);
				list.add(whelearnE);
				//region
				WheLearn whelearnF = new WheLearn();
				whelearnF.setListProgram(recommendService.getRecommendPrograms(userId, categoryId, keywordId, 5));
				whelearnF.setType(6);
				List<String> keywordStrF = (List<String>) recommendService.getKeyWordListByUserId(userId, 5).get("keyword");
				whelearnF.setListKeyword(keywordStrF);
				list.add(whelearnF);

			} else {
				// set keyword string
				WheLearn whelearnA = new WheLearn();
				whelearnA.setListKeyword(null);
				whelearnA.setType(1);
				list.add(whelearnA);
				
				//set recommended program
				//all
				WheLearn whelearnB = new WheLearn();
				whelearnB.setListProgram(recommendService.getRecommendProgramsAll());
				whelearnB.setType(2);
				list.add(whelearnB);
				//teacher
				WheLearn whelearnC = new WheLearn();
				whelearnC.setListProgram(recommendService.getRecommendProgramsTeacher());
				whelearnC.setType(3);
				List<String> keywordStrC = (List<String>) recommendService.getKeyWordListByUserId(0, 2).get("keyword");
				whelearnC.setListKeyword(keywordStrC);
				list.add(whelearnC);
				//time
				Map<String, Object> keywordListD = recommendService.getKeyWordListByUserId(0, 3);
				WheLearn whelearnD = new WheLearn();
				whelearnD.setListProgram(recommendService.getRecommendProgramsNotLogin((Map<String, Object>) keywordListD.get("keywordId")));
				whelearnD.setType(4);
				whelearnD.setListKeyword((List<String>) keywordListD.get("keyword"));
				list.add(whelearnD);
				//price
				Map<String, Object> keywordListE = recommendService.getKeyWordListByUserId(0, 4);
				WheLearn whelearnE = new WheLearn();
				whelearnE.setListProgram(recommendService.getRecommendProgramsNotLogin((Map<String, Object>) keywordListE.get("keywordId")));
				whelearnE.setType(5);
				whelearnE.setListKeyword((List<String>) keywordListE.get("keyword"));
				list.add(whelearnE);
				//region
				Map<String, Object> keywordListF = recommendService.getKeyWordListByUserId(0, 5);
				WheLearn whelearnF = new WheLearn();
				whelearnF.setListProgram(recommendService.getRecommendProgramsNotLogin((Map<String, Object>) keywordListF.get("keywordId")));
				whelearnF.setType(6);
				whelearnF.setListKeyword((List<String>) keywordListF.get("keyword"));
				list.add(whelearnF);
				
			}

			return SUCCESS(list);

		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}


	@RequestMapping(value = "/program/category", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPagingByCategory(
			@RequestHeader(value = "token", required = false) String token, @RequestBody String json)
					throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = 1;
			try {
				page = DataUtils.parseInt(jsonObj.get("page"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			Integer catId = DataUtils.parseInt(jsonObj.get("categoryId"));
			Page<ProgramEntity> list = null;
			if (catId != 0) {
				list = programService.findByCategoryId(catId, page, 10);
			} else {
				list = programService.listPaging(page, 10);
			}
			if (list.getContent() != null) {
				List<Program> result = new ArrayList<>();
				for (ProgramEntity i : list) {
					Program p = new Program();
					p = programServiceMapper.mapProgramEntityToProgram(i);
					result.add(p);
				}
				ret.put("list", result);
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/program/categories", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> categories(@RequestHeader(value = "token", required = false) String token,
			@RequestBody String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			String categories = (String) jsonObj.get("listCategory");
			categories = categories.substring(1, categories.length() - 1);
			String[] catIdSplit = categories.split(",");
			Integer[] catArray = null;
			Integer page = 1;
			if (catIdSplit.length > 0) {
				catArray = new Integer[catIdSplit.length];
				for (int i = 0; i < catIdSplit.length; i++) {
					catArray[i] = DataUtils.parseInt(catIdSplit[i]);
				}
			}
			try {
				page = DataUtils.parseInt(jsonObj.get("page"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			Page<ProgramEntity> list = programService.findByListCategoryId(catArray, page, 12);
			if (list.getContent() != null) {
				List<Program> result = new ArrayList<>();
				for (ProgramEntity i : list) {
					Program p = new Program();
					p = programServiceMapper.mapProgramEntityToProgram(i);
					result.add(p);
				}
				ret.put("list", result);
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/comment/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllCommentPaging(@RequestHeader(value = "token", required = false) String token,
			@RequestBody String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = 1;
			try {
				page = DataUtils.parseInt(jsonObj.get("page"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			Integer type = DataUtils.parseInt(jsonObj.get("type"));
			Integer threadId = DataUtils.parseInt(jsonObj.get("threadId"));
			Page<CommentEntity> list = null;
			if (type != null && threadId != null) {
				list = commentService.listPagingByTypeAndThreadId(type, threadId, page, 10);
			}
			if (list.getContent() != null) {
				ret.put("totalComment", list.getTotalElements());
				ret.put("list", list.getContent());
				if (type == 2) {
					Program p = programService.findById(threadId);
					ret.put("point", p.getPoint());
				}
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/event/paging", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPagingEvent(@RequestHeader(value = "token", required = false) String token,
			@RequestBody String json) throws ParseException {
		// UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret = new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<EventEntity> list = eventService.findAll(page);
			if (list.getContent() != null) {
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

	@RequestMapping(value = "/event/item/{id}", method = { RequestMethod.POST,
			RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOneEvent(@PathVariable("id") Integer id,
			@RequestHeader(value = "token", required = false) String token) {
		// UserItem user =AuthorizationToken.convertToObject(token);
		try {
			Event item = eventService.findById(id);
			if (item != null) {
				item.setViewCount(item.getViewCount() + 1);
				item = eventService.update(item);
				return SUCCESS(item);
			} else {
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: " + e);
		}

	}

}
