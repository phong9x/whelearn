/*
 * Created on 23 thg 8 2016 ( Time 16:25:36 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.rest.controller;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.bean.Comment;
import org.trams.bean.CouponUse;
import org.trams.bean.Program;
import org.trams.bean.User;
import org.trams.bean.UserItem;
import org.trams.bean.jpa.CommentEntity;
import org.trams.bean.jpa.ProgramEntity;
import org.trams.business.service.CategoryService;
import org.trams.business.service.CommentService;
import org.trams.business.service.CouponUseService;
import org.trams.business.service.ProgramService;
import org.trams.business.service.UserService;
import org.trams.business.service.mapping.ProgramServiceMapper;
import org.trams.rest.common.AbstractRestController;
import org.trams.rest.common.AuthorizationToken;
import org.trams.rest.common.notification.Notification;
import org.trams.web.common.ApplicationDefine;
import org.trams.web.common.utils.DataUtils;
/**
 * Spring MVC controller for 'Comment' management.
 */
@RequestMapping("/comment")
@Controller
public class CommentRestController extends AbstractRestController{

	@Resource
	private CommentService commentService;
	@Resource
	private ProgramService programService;
	@Resource
	private ProgramServiceMapper programServiceMapper;
	@Resource
	private CouponUseService couponUseService;
	@Resource
	private UserService userService;
	
	@Resource
	private CategoryService categoryService;
		
	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token") String token
	) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			List<Comment> list = commentService.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody String json
	) throws ParseException {
		//UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = 1;
			try {
				page = DataUtils.parseInt(jsonObj.get("page"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			Integer type = DataUtils.parseInt(jsonObj.get("type"));
			Integer threadId = DataUtils.parseInt(jsonObj.get("threadId"));
			Page<CommentEntity> list = null;
			if(type !=null && threadId!=null){
				list = commentService.listPagingByTypeAndThreadId(type, threadId, page, 10);
			}
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
		
	} 
	
	@RequestMapping( value="/item/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	@PathVariable("id") Integer id,
	@RequestHeader(value="token") String token
		) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			Comment item= commentService.findById(id);
			if(item!=null){
				return SUCCESS(item);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			return FAIL("HAVE ERROR: "+e);
		}
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody Comment item
	) {
	try{
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setUserId(user.getId());
			item.setUpdateDate(DataUtils.getNowDate());
			item.setCreateDate(DataUtils.getNowDate());
			Comment create= commentService.create(item);
			
			CouponUse c1 = new CouponUse();
			c1.setCouponId(6);
			c1.setCreateDate(DataUtils.getNowDate());
			Calendar ca = Calendar.getInstance();
			ca.setTime(DataUtils.getNowDate());
			ca.add(Calendar.DAY_OF_YEAR, 30);
			c1.setDeadline(ca.getTime());
			c1.setStatusUse(0);
			c1.setUpdateDate(DataUtils.getNowDate());
			c1.setUserId(user.getId());
			couponUseService.create(c1);
			if(create != null && create.getType() == 2 ){
				ProgramEntity pe = programService.findOne(create.getThreadId());
				Program p = programServiceMapper.mapProgramEntityToProgram(pe);
				double point_average = commentService.averagePointByProgramIdAndType(item.getThreadId(), 2);
				int point_int = (int)point_average;
				float result=point_int ;
				double over = point_average - point_int;
				if(over > 0.25 && over <= 0.75){
					result =  ((float)point_int + (float)0.5);
				}else if(over > 0.75){
					result = point_int + 1;
				}
				p.setPoint(result);
				programService.update(p);
				User u = userService.findById(user.getId());
				if(u.getFcmToken() != null && !u.getFcmToken().equals("")){
					System.out.println(">>>>>>>>>>send coupon comment to user "+ u.getId());
					List<String> list_reg = new ArrayList<>();
					list_reg.add(u.getFcmToken());
					Notification n = new Notification();
					n.sendNotification(list_reg, "쿠폰 발행 및 만료 알림", "후기 감사 쿠폰이 발행되었습니다. 쿠폰 관리 페이지를 확인해 주세요!", p.getId(),
					ApplicationDefine.NOTIFICATION_CouponNotification, 1);
				}
			}
			
			return SUCCESS(create);
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody Comment item
	) {
	try{	
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setUserId(user.getId());
			item.setUpdateDate(DataUtils.getNowDate());
			Comment edit=commentService.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			System.out.println(e);
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/{id}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	@PathVariable("id") Integer id) {
		try{
				commentService.delete(id);
				return SUCCESS();
		}catch(Exception e){
				System.out.println(e);
				return FAIL("HAVE ERROR: "+e);
		}
	}
	
}



