## #set( $tools = $loader.newInstance("Tools") )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## // ${DOLLAR}pkPath          = "$pkPath"
## // ${DOLLAR}pkPathVariables = "$pkPathVariables"
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
#set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

#if ( $referencedEntities.size() > 0 )
import java.util.LinkedList;
#end
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.ModelAttribute;


//--- Common classes
import ${ROOT_PKG}.web.common.AbstractController;
import ${ROOT_PKG}.web.common.Pager;
import ${ENTITY_PKG}.jpa.${entity.name}Entity;

//--- Entities
import ${ENTITY_PKG}.${entity.name};
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${ENTITY_PKG}.$ref;
#end
#end

//--- Services 
import ${ROOT_PKG}.business.service.${entity.name}Service;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.business.service.${ref}Service;
#end
#end

#if ( $referencedEntities.size() > 0 )
//--- List Items 
#end
#foreach( $ref in $referencedEntities )
import ${ROOT_PKG}.web.listitem.${ref}ListItem;
#end

/**
 * Spring MVC controller for '${entity.name}' management.
 */
@Controller
@RequestMapping("/admin/$uncapitalizedEntityName")
public class ${entity.name}AdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "${uncapitalizedEntityName}";
	private static final String MAIN_LIST_NAME = "list";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "${uncapitalizedEntityName}";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/${uncapitalizedEntityName}/create";
	private static final String JSP_LIST   = "admin/${uncapitalizedEntityName}/list";
	private static final String JSP_EDIT   = "admin/${uncapitalizedEntityName}/edit";
	private static final String JSP_DETAIL   = "admin/${uncapitalizedEntityName}/detail";
	private static final String JSP_LOGIN   = "redirect:/login";

	//--- Main entity service
	@Resource
    private ${entity.name}Service ${uncapitalizedEntityName}Service; // Injected by Spring
	//--- Other service(s)
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple declarations for the same service
	@Resource
    private ${ref}Service ${fn.uncapitalize(${ref})}Service; // Injected by Spring
#end
#end

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ${entity.name}AdminController() {
		super(${entity.name}AdminController.class, MAIN_ENTITY_NAME );
		log("${entity.name}AdminController created.");
	}

	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="id") String type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(key==null){
			key="";
		}
		if(delete>0){
			${uncapitalizedEntityName}Service.delete(delete);
		}
		Page<${entity.name}Entity> listPage = null;
		listPage=${uncapitalizedEntityName}Service.findAll(page);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/admin/${uncapitalizedEntityName}/list");
		new Pager<${entity.name}Entity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}

	
	@RequestMapping("/detail/${pkPath}")
	public String detail(
	Model model, 
	HttpSession session,
	${pkPathVariables}) {
		
			
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
		model.addAttribute("${uncapitalizedEntityName}", ${uncapitalizedEntityName});
		return JSP_DETAIL;
	}
	@RequestMapping(value = "/create", method = RequestMethod.GET ) 
	public String create(
			HttpSession session,
			Model model) {
		log("Action 'create'");
		model.addAttribute("activePage", nav);
		return JSP_CREATE;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST ) 
	public String create(
			HttpSession session,
			@ModelAttribute ${entity.name} ${uncapitalizedEntityName},
			Model model) {
		log("Action 'create'");
		
			
		try {
#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "createDate" || $field.formattedName(0) == "updateDate" )
			${uncapitalizedEntityName}.${field.setter}( new Date() );
#end
#end
			${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName});
			return "redirect:/"+JSP_LIST;
		} catch(Exception e) {
			System.out.println(e);
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/edit/${pkPath}", method = RequestMethod.GET)
	public String update(
	HttpSession session,
	${pkPathVariables},
	Model model  ) {
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
		try {
			model.addAttribute("item", ${uncapitalizedEntityName});
			model.addAttribute("activePage", nav);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/edit/${pkPath}", method = RequestMethod.POST)
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@ModelAttribute ${entity.name} item,
	HttpSession session,
	${pkPathVariables},
	Model model  ) {
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
		try {
#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "createDate" )
#elseif($field.formattedName(0) == "updateDate" )
			${uncapitalizedEntityName}.${field.setter}( new Date() );
#else
			${uncapitalizedEntityName}.${field.setter}( item.${field.getter}() );
#end
#end
			${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
			model.addAttribute("item", ${uncapitalizedEntityName});
		} catch(Exception e) {
			System.out.println(e);
		}
		return "redirect:/"+JSP_EDIT+"/"+id;
	}
	
	

	@RequestMapping(value = "/delete/${pkPath}")
	public String delete(
	Model model, 
	HttpSession session,
	${pkPathVariables} ) {
	
			
	${uncapitalizedEntityName}Service.delete(${pkElementsVariables});
	return "redirect:/"+JSP_LIST;
	}

}
