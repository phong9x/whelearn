#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.*;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import ${ROOT_PKG}.bean.UserItem;
import ${ROOT_PKG}.bean.${entity.name};
import ${ROOT_PKG}.bean.jpa.${entity.name}Entity;
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.rest.common.AbstractRestController;
import ${ROOT_PKG}.rest.common.AuthorizationToken;
import ${ROOT_PKG}.web.common.utils.DataUtils;
/**
 * Spring MVC controller for '${entity.name}' management.
 */
@RequestMapping("/${uncapitalizedEntityName}")
@Controller
public class ${entity.name}RestController extends AbstractRestController{

	@Resource
	private ${entity.name}Service ${uncapitalizedEntityName}Service;
	
	#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
	#if( ${uncapitalizedEntityName} == "user" || ${uncapitalizedEntityName} == "users" || ${uncapitalizedEntityName} == "member" || ${uncapitalizedEntityName} == "members")
	@RequestMapping(value = "/login", method = { RequestMethod.POST,
	RequestMethod.GET }, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> login(@RequestBody $entity.name ${uncapitalizedEntityName}, HttpSession session) {
		try {
			String password = DataUtils.getMD5(${uncapitalizedEntityName}.getPassword());
			User u = ${uncapitalizedEntityName}Service.login(${uncapitalizedEntityName}.getUsername(), password);
			if (u != null && (u.getType()== 1 || u.getType()== 2)) {
				u.setToken(AuthorizationToken.generateTokenMobile(u));
				return SUCCESS(u);
			} else {
				return SUCCESS("Username and password is not match");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: " + e);
		}
	}
	#end

	@RequestMapping( value="/all",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAll(
	@RequestHeader(value="token") String token
	) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			List<${entity.name}> list = ${uncapitalizedEntityName}Service.findAll();
			return SUCCESS(list);
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	} 
	
	@RequestMapping( value="/paging",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findAllPaging(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody String json
	) throws ParseException {
		//UserItem user =AuthorizationToken.convertToObject(token);
		HashMap<String, Object> ret =new HashMap<String, Object>();
		try {
			JSONParser parser = new JSONParser();
			JSONObject jsonObj = (JSONObject) parser.parse(json);
			Integer page = DataUtils.parseInt(jsonObj.get("page"));
			Page<${entity.name}Entity> list = ${uncapitalizedEntityName}Service.findAll(page);
			if(list.getContent()!=null){
				ret.put("list", list.getContent());
				ret.put("page", page);
				ret.put("totalPage", list.getTotalPages());
				return SUCCESS(ret);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
		
	} 


	@RequestMapping( value="/item/${pkPath}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findOne(
	${pkPathVariables},
	@RequestHeader(value="token") String token
		) {
		//UserItem user =AuthorizationToken.convertToObject(token);
		try {
			${entity.name} item= ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
			if(item!=null){
				return SUCCESS(item);
			}else{
				return SUCCESS();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
		
	}
	
	@RequestMapping( value="/create",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody ${entity.name} item
	) {
	try{
#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "userId" )
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setUserId(user.getId());
#end
#if( $field.formattedName(0) == "createDate" )
			item.setCreateDate(new Date());
#end
#if( $field.formattedName(0) == "updateDate" )
			item.setUpdateDate(new Date());
#end
#if( $field.formattedName(0) == "isDelete" )
			item.setIsDelete(0);
#end
#end
			${entity.name} create= ${uncapitalizedEntityName}Service.create(item);
			return SUCCESS(create);
		}catch(Exception e){
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/edit",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> edit(
	@RequestHeader(value="token",required=false) String token,
	@RequestBody ${entity.name} item
	) {
	try{
#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "userId" )
			UserItem user =AuthorizationToken.convertToObject(token);
			item.setUserId(user.getId());
#end
#if( $field.formattedName(0) == "updateDate" )
			item.setUpdateDate(new Date());
#end
#end
			${entity.name} edit=${uncapitalizedEntityName}Service.update(item);
			return SUCCESS(edit);
		}catch(Exception e){
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	}

	@RequestMapping( value="/delete/${pkPath}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
	@RequestHeader(value="token",required=false) String token,
	${pkPathVariables}) {
		try{
				${uncapitalizedEntityName}Service.delete(${pkElementsVariables});
				return SUCCESS();
		}catch(Exception e){
				e.printStackTrace();
				return FAIL("HAVE ERROR: "+e);
		}
	}
	
#foreach( $field in $dataFields )
#if( $field.formattedName(0) == "isDelete" )
	@RequestMapping( value="/remove/${pkPath}",
			method = {RequestMethod.POST, RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> update_delete(
	@RequestHeader(value="token",required=false) String token,
	${pkPathVariables}) {
		try{
			${uncapitalizedEntityName}Service.update_isDelete(${pkElementsVariables});
			return SUCCESS();
		}catch(Exception e){
			e.printStackTrace();
			return FAIL("HAVE ERROR: "+e);
		}
	}
#end
#end
}



